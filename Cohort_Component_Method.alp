<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File 
*************************************************	         
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="8.7.10.202202091718" AlpVersion="8.7.3">
<Model>
	<Id>1494655951603</Id>
	<Name><![CDATA[Cohort_Component_Method]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[cohort_comp_method_2020]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Year]]></ModelTimeUnit>
	<OptionLists>
		<OptionList>
			<Id>1494658617686</Id>
			<Name><![CDATA[Gender_List]]></Name>
			<Option>
				<Id>1494658617687</Id>
				<Name><![CDATA[MALE]]></Name>
			</Option>
			<Option>
				<Id>1494658617688</Id>
				<Name><![CDATA[FEMALE]]></Name>
			</Option>
		</OptionList>
		<OptionList>
			<Id>1494751969971</Id>
			<Name><![CDATA[Nativity_Level]]></Name>
			<Option>
				<Id>1494751969972</Id>
				<Name><![CDATA[NATIVE]]></Name>
			</Option>
			<Option>
				<Id>1494751969973</Id>
				<Name><![CDATA[SEMI_NATIVE]]></Name>
			</Option>
			<Option>
				<Id>1494751969974</Id>
				<Name><![CDATA[NON_NATIVE]]></Name>
			</Option>
		</OptionList>
		<OptionList>
			<Id>1611761363642</Id>
			<Name><![CDATA[Yearly_Update_Actions]]></Name>
			<Option>
				<Id>1611761365253</Id>
				<Name><![CDATA[Mortality]]></Name>
			</Option>
			<Option>
				<Id>1611761379310</Id>
				<Name><![CDATA[Reproduction]]></Name>
			</Option>
		</OptionList>
	</OptionLists>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1494655951608</Id>
			<Name><![CDATA[Main]]></Name>
			<AdditionalClassCode><![CDATA[/*
 * In order to support parameter sweeps via AnyLogic's Parameter Variation experiments,
 * we've added this code that filters out invalid parameter combinations and allows
 * mapping integer inputs (which can be varied using AnyLogic's parameter ranges) to
 * boolean inputs.
 */

public static Predicate<Main> BASIC_FILTER = m -> {
	if (m.TopDown != m.TopDownInitialAgents) {
		traceln("Skipping experiment " + m.SimulationID + " for inconsistent TopDown.");
		return true;
	}
	if ((m.FiveYearStep && m.AgentInitializationPerAgeYear)
			|| (!m.FiveYearStep && !m.AgentInitializationPerAgeYear)) {
			
		traceln("Skipping experiment " + m.SimulationID + " for inconsistent Agent Age Init.");
		return true;
	}
	// Split age is always forced when splitFertility is enabled, so it is redundant
	if (m.splitFertility && !m.ForceUseSplitAge) {
		traceln("Skipping experiment " + m.SimulationID + " for redundant ForceUseSplitAge.");
		return true;
	}
	if (!m.splitFertility && m.ForceUseSplitAge) {
		traceln("Skipping experiment " + m.SimulationID + " for redundant ForceUseSplitAge.");
		return true;
	}
	// Conceptually, Five Year Step + Split Age has no definition
	/*if (m.FiveYearStep && m.ForceUseSplitAge) {
		traceln("Skipping experiment " + m.SimulationID + " for undefined: ForceUseSplitAge.");
		return true;
	}
	if(m.FiveYearStep && m.ImmigrantsImmuneFromDeath) {
		traceln("Skipping experiment " + m.SimulationID + " for Immigrant Death immunity undefined for Five year step.");
		return true;
	}*/
	if(!m.splitFertility && m.ImmigrantsImmuneFromDeath) {
		traceln("Skipping experiment " + m.SimulationID + " for undefined: !SplitFert w/ immigrant mort immunity.");
		return true;
	}
	if(m.splitFertility && !m.ImmigrantsImmuneFromDeath) {
		traceln("Skipping experiment " + m.SimulationID + " for undefined: SplitFert w/o immigrant mort immunity.");
		return true;
	}

	return false;
};

private synchronized void setInitialParameters() {
	// Initial agents can be set via input_NumberOfInitialAgents or through the array
	// starting_population_sizes and an index starting_population_size_index.
	if (input_NumberOfInitialAgents > 0) {
		Number_of_Adults = input_NumberOfInitialAgents;
	} else {
		Number_of_Adults = starting_population_sizes[starting_population_size_index];
	}
						
	Sex_Ratio_Init_Pop = selectFrom(init_stats)
						.where(init_stats.country_id.eq(country_id))
						.uniqueResult(init_stats.intial_sex_ratio);
	
	// These values of inputs of the format input_<VariableName> which are integers,
	// and that integer is mapped to a boolean (0 == false, 0 != true)
	// This allows us to do a parameter sweep (AnyLogic does not allow a boolean range).					
	FiveYearStep = input_FiveYearStep != 0;
	TopDown = input_TopDown != 0;
	TopDownInitialAgents = input_TopDownInitialAgents != 0;
	AgentInitializationPerAgeYear = input_AgentInitializationPerAgeYear != 0;
	ForceUseSplitAge = input_ForceUseSplitAge != 0;
	splitFertility = input_splitFertility != 0;
	ImmigrantsImmuneFromDeath = input_ImmigrantsImmuneFromDeath != 0;
	
	Percent_Pop =  Double.valueOf(Number_of_Adults) / selectFrom(init_stats)
						.where(init_stats.country_id.eq(country_id))
						.uniqueResult(init_stats.initial_population);	
}]]></AdditionalClassCode>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Import><![CDATA[import java.io.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;
import java.util.function.Function;
import java.util.function.Predicate;
import java.lang.reflect.*;
import java.io.ObjectStreamConstants;
import org.eclipse.jdt.internal.compiler.codegen.IntegerCache;]]></Import>
			<StartupCode><![CDATA[setInitialParameters();]]></StartupCode>
			<Generic>false</Generic>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>GIS</SpaceType>
					<WidthCode><![CDATA[1000]]></WidthCode>
					<HeightCode><![CDATA[1000]]></HeightCode>
					<ZHeightCode><![CDATA[500]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>RANDOM</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>DISTANCE_BASED</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[4]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[Interaction_Radius]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1494662400000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0.1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1494655951605</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1580971507779</CurrentLevel>
			<ConnectionsId>1494655951604</ConnectionsId>
			<Outputs>
				<Output>
					<Id>1590739027637</Id>
					<Name><![CDATA[Population_Size]]></Name>
					<X>100</X><Y>1900</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Type><![CDATA[int]]></Type>
					<UnitType><![CDATA[NONE]]></UnitType>
					<Value Class="CodeValue">
						<Code><![CDATA[People.size()]]></Code>
					</Value>
					<ComputationMoment>MANUALLY</ComputationMoment>
					<ComputationTimeCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</ComputationTimeCode>
					<ComputationDate>1590739200000</ComputationDate>
				</Output>
				<Output>
					<Id>1590739178373</Id>
					<Name><![CDATA[Fertility_rate]]></Name>
					<X>100</X><Y>1940</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Type><![CDATA[double]]></Type>
					<UnitType><![CDATA[NONE]]></UnitType>
					<Value Class="CodeValue">
						<Code><![CDATA[Calculate_Fertility_rate()]]></Code>
					</Value>
					<ComputationMoment>MANUALLY</ComputationMoment>
					<ComputationTimeCode Class="CodeUnitValue">
						<Code><![CDATA[null]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</ComputationTimeCode>
					<ComputationDate>1590739200000</ComputationDate>
				</Output>
			</Outputs>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1573572859418</Id>
					<Name><![CDATA[Previous_Period_Pop]]></Name>
					<X>330</X><Y>-60</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1588668819055</Id>
					<Name><![CDATA[csvFileName]]></Name>
					<X>830</X><Y>-260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA["LHS_Experiment_Output.csv"]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1588670399824</Id>
					<Name><![CDATA[Period_Count]]></Name>
					<X>830</X><Y>-240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[Starting_Period]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590745144410</Id>
					<Name><![CDATA[Death_Rate]]></Name>
					<X>-120</X><Y>2610</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590745192616</Id>
					<Name><![CDATA[Immigration_Rate]]></Name>
					<X>1030</X><Y>2590</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590745229842</Id>
					<Name><![CDATA[Emigration_Rate]]></Name>
					<X>1030</X><Y>2620</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590745828569</Id>
					<Name><![CDATA[Generation_Counter]]></Name>
					<X>-200</X><Y>3260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int []]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new int [40]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590747268797</Id>
					<Name><![CDATA[Emigrant_counter]]></Name>
					<X>20</X><Y>-270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590747401863</Id>
					<Name><![CDATA[Immigrant_counter]]></Name>
					<X>20</X><Y>-250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590747416577</Id>
					<Name><![CDATA[Death_counter]]></Name>
					<X>330</X><Y>-40</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590758694633</Id>
					<Name><![CDATA[Birth_Rate]]></Name>
					<X>-120</X><Y>2580</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590758827032</Id>
					<Name><![CDATA[Birth_counter]]></Name>
					<X>330</X><Y>-20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1591096589249</Id>
					<Name><![CDATA[Growth_Rate]]></Name>
					<X>320</X><Y>1970</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1592319672760</Id>
					<Name><![CDATA[Net_Migration_Rate]]></Name>
					<X>1030</X><Y>2650</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598870350350</Id>
					<Name><![CDATA[Year_Count]]></Name>
					<Description><![CDATA[Year at which simulation starts]]></Description>
					<X>830</X><Y>-220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[1950]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878738498</Id>
					<Name><![CDATA[Immigration_Rate_Mal]]></Name>
					<X>1030</X><Y>2690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878738502</Id>
					<Name><![CDATA[Emigration_Rate_Mal]]></Name>
					<X>1030</X><Y>2720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878738504</Id>
					<Name><![CDATA[Net_Migration_Rate_Mal]]></Name>
					<X>1030</X><Y>2750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878773720</Id>
					<Name><![CDATA[Immigration_Rate_Fem]]></Name>
					<X>1210</X><Y>2690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878773722</Id>
					<Name><![CDATA[Emigration_Rate_Fem]]></Name>
					<X>1210</X><Y>2720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878773732</Id>
					<Name><![CDATA[Net_Migration_Rate_Fem]]></Name>
					<X>1210</X><Y>2750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878834136</Id>
					<Name><![CDATA[Emigrant_counter_Mal]]></Name>
					<X>20</X><Y>-220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878834138</Id>
					<Name><![CDATA[Immigrant_counter_Mal]]></Name>
					<X>20</X><Y>-200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878854296</Id>
					<Name><![CDATA[Emigrant_counter_Fem]]></Name>
					<X>20</X><Y>-170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878854298</Id>
					<Name><![CDATA[Immigrant_counter_Fem]]></Name>
					<X>20</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598950150580</Id>
					<Name><![CDATA[Age_Prob]]></Name>
					<Description><![CDATA[Probability of assigning an age in 5 year-category intervals. The probability increases linearly with age.
Note, these are cumulative probabilities, each number is the sum of the previous ones.]]></Description>
					<X>350</X><Y>-280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[{0.1111111,0.3333333,0.6666667,0.8888889,1.0}]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482097788</Id>
					<Name><![CDATA[CDF_Age_Pop]]></Name>
					<X>640</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double []]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [10]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482466129</Id>
					<Name><![CDATA[CDF_Age_Mal]]></Name>
					<X>640</X><Y>-110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double []]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [10]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482471437</Id>
					<Name><![CDATA[CDF_Age_Fem]]></Name>
					<X>640</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double []]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [10]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482567293</Id>
					<Name><![CDATA[BR_Per_Age]]></Name>
					<X>640</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [35]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482619439</Id>
					<Name><![CDATA[DR_Per_Age_Fem]]></Name>
					<X>640</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [24]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482651502</Id>
					<Name><![CDATA[DR_Per_Age_Mal]]></Name>
					<X>640</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [24]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599485913243</Id>
					<Name><![CDATA[Counter_BR_Per_Age]]></Name>
					<X>780</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [35]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599485913247</Id>
					<Name><![CDATA[Counter_DR_Per_Age_Fem]]></Name>
					<X>780</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [24]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599485913249</Id>
					<Name><![CDATA[Counter_DR_Per_Age_Mal]]></Name>
					<X>780</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [24]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599488639968</Id>
					<Name><![CDATA[Counter_Male_Births]]></Name>
					<X>780</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599488664711</Id>
					<Name><![CDATA[Counter_Female_Births]]></Name>
					<X>780</X><Y>-110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599637101837</Id>
					<Name><![CDATA[Sex_Ratio_At_Birth]]></Name>
					<X>780</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1600839551212</Id>
					<Name><![CDATA[Counter_Pop_By_Age_Mal]]></Name>
					<X>980</X><Y>-120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new int [21]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1600839578861</Id>
					<Name><![CDATA[Counter_Pop_By_Age_Fem]]></Name>
					<X>980</X><Y>-140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new int [21]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1630679499058</Id>
					<Name><![CDATA[Interaction_Radius]]></Name>
					<Description><![CDATA[I don't believe this is used but the model wouldn't build without it.]]></Description>
					<X>-190</X><Y>1080</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1631582427969</Id>
					<Name><![CDATA[emigrationRateCache]]></Name>
					<X>1015</X><Y>-415</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Map<Cohort, Double>]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new ConcurrentHashMap<>();]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1635972647142</Id>
					<Name><![CDATA[Number_of_Adults]]></Name>
					<X>-740</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1635972798745</Id>
					<Name><![CDATA[Sex_Ratio_Init_Pop]]></Name>
					<X>-740</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490357143</Id>
					<Name><![CDATA[FiveYearStep]]></Name>
					<X>-740</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490397142</Id>
					<Name><![CDATA[Percent_Pop]]></Name>
					<X>-740</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450039</Id>
					<Name><![CDATA[splitFertility]]></Name>
					<X>-740</X><Y>280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450293</Id>
					<Name><![CDATA[ForceUseSplitAge]]></Name>
					<X>-740</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450549</Id>
					<Name><![CDATA[AgentInitializationPerAgeYear]]></Name>
					<X>-740</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450771</Id>
					<Name><![CDATA[TopDownInitialAgents]]></Name>
					<X>-740</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450990</Id>
					<Name><![CDATA[TopDown]]></Name>
					<X>-740</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648493023180</Id>
					<Name><![CDATA[ImmigrantsImmuneFromDeath]]></Name>
					<X>-740</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1540893879728</Id>
					<Name><![CDATA[AnnualCSV_FileName]]></Name>
					<X>1560</X><Y>-230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1540893879726</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1540893879734</Id>
					<Name><![CDATA[Annual_Individual_CSV_FileName]]></Name>
					<X>1630</X><Y>-160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1540893879732</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1540893879741</Id>
					<Name><![CDATA[SimulationID]]></Name>
					<X>1510</X><Y>-270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["NA"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1540893879739</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1540894011080</Id>
					<Name><![CDATA[Annual_Data_Collect]]></Name>
					<X>1510</X><Y>-290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1540894011078</Id>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1541740410511</Id>
					<Name><![CDATA[Annual_Club_CSV_FileName]]></Name>
					<X>1630</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1541740410509</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1588671396788</Id>
					<Name><![CDATA[LHS_Experiment_Number]]></Name>
					<X>850</X><Y>-200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1588671396786</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1590673500669</Id>
					<Name><![CDATA[Periods]]></Name>
					<X>-520</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[List<String>]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[selectFrom(fertility_rate).list(fertility_rate.period).subList(0,30)
//Arrays.asList("2021-2025","2026-2030","2031-2035","2036-2040","2041-2045","2046-2050","2051-2055","2056-2060","2061-2065","2066-2070",
//             "2071-2075","2076-2080","2081-2085","2086-2090","2091-2095","2096-2100")]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1590673500667</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1612992144530</Id>
					<Name><![CDATA[input_TopDownInitialAgents]]></Name>
					<X>-520</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1612992144528</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1617721935915</Id>
					<Name><![CDATA[input_FiveYearStep]]></Name>
					<X>-520</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1617721935913</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1618332956184</Id>
					<Name><![CDATA[Death_Rate_Source]]></Name>
					<Description><![CDATA[CDR, SR,PC]]></Description>
					<X>-520</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["CDR"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1618332956182</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1618584211210</Id>
					<Name><![CDATA[Birth_Rate_Source]]></Name>
					<Description><![CDATA[FR,BC]]></Description>
					<X>-520</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["FR"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1618584211208</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1620835060614</Id>
					<Name><![CDATA[input_TopDown]]></Name>
					<X>-520</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1620835060612</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1620919785493</Id>
					<Name><![CDATA[input_AgentInitializationPerAgeYear]]></Name>
					<X>-520</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1620919785491</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1621627279688</Id>
					<Name><![CDATA[Starting_Period]]></Name>
					<X>830</X><Y>-280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1621627279686</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1621629563421</Id>
					<Name><![CDATA[input_NumberOfInitialAgents]]></Name>
					<X>-520</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[10000]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1621629563419</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631551760655</Id>
					<Name><![CDATA[input_splitFertility]]></Name>
					<X>-520</X><Y>280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631551760653</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1635971049972</Id>
					<Name><![CDATA[country_id]]></Name>
					<X>-520</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[DBUtils.COUNTRY_ID_NORWAY]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1635971049970</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1639591937776</Id>
					<Name><![CDATA[input_ForceUseSplitAge]]></Name>
					<X>-520</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1639591937774</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1648492121753</Id>
					<Name><![CDATA[starting_population_size_index]]></Name>
					<X>-520</X><Y>390</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1648492121751</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1648492141861</Id>
					<Name><![CDATA[starting_population_sizes]]></Name>
					<X>-520</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int[]]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[{}]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1648492141859</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1648493023183</Id>
					<Name><![CDATA[input_ImmigrantsImmuneFromDeath]]></Name>
					<X>-520</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1648493023181</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1648595220287</Id>
					<Name><![CDATA[skipExperimentFilter]]></Name>
					<X>-520</X><Y>470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[Predicate<Main>]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[m -> false]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1648595220285</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1519143896537</Id>
					<Name><![CDATA[Populate]]></Name>
					<X>500</X><Y>-240</Y>
					<Label><X>25</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[setInitialParameters(); if (!skipExperimentFilter.test(this)) Generate_Agents();]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1519223963311</Id>
					<Name><![CDATA[Period_Updates]]></Name>
					<X>490</X><Y>-80</Y>
					<Label><X>10</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="120" Height="30">
						<EntryAction><![CDATA[if (simulationIsOver()) {
	return;
}

String Period = Periods.get(Period_Count);

// In this function, periodal values are reset and period stats in the
// output csv are written.


// IMPORTANT NOTE: Histogram code has not been maintained and most
// likely is broken. It has not been removed due to it being a bit of
// a hassle (the histogram code is in a bunch of little places in 
// AnyLogic that makes it more complicated than one would think to
// remove.

/// Reset histograms
Hist_Age_Pop.reset();
Hist_Age_Mal.reset();
Hist_Age_Fem.reset();

/// Update Birth rate
Birth_Rate = Birth_counter / Previous_Period_Pop;

// Update Death rate
Death_Rate = Death_counter / Previous_Period_Pop;

/// GET INMIGRATION RATE
Immigration_Rate = Immigrant_counter / Previous_Period_Pop;
Immigration_Rate_Mal = Immigrant_counter_Mal / Previous_Period_Pop;
Immigration_Rate_Fem = Immigrant_counter_Fem / Previous_Period_Pop;

/// GET EMIGRATION RATE
Emigration_Rate = Emigrant_counter / Previous_Period_Pop;
Emigration_Rate_Mal = Emigrant_counter_Mal / Previous_Period_Pop;
Emigration_Rate_Fem = Emigrant_counter_Fem / Previous_Period_Pop;

/// GET NET MIGRATION RATE
Net_Migration_Rate = (Immigrant_counter - Emigrant_counter) / Previous_Period_Pop;
Net_Migration_Rate = 0;

// Update population size, fertility rate, and generation counter
update_Population_Size();
update_Fertility_rate();
Update_Generation_Counter();

Update_Hist_CDF_Pop_Age();
Update_BR_DR_per_Age();

//Update Growth Rate
Growth_Rate = People.size() / Previous_Period_Pop;
//traceln("Previous Pop " + Previous_Period_Pop + " Current Pop " + People.size() + " Growth Rate " + Growth_Rate);

//Sex Ratio At Birth
Sex_Ratio_At_Birth = (double) Counter_Male_Births / ( Counter_Male_Births + Counter_Female_Births);

if ( Annual_Data_Collect == true )
{
	Update_AnnualCSV_CustomExp(AnnualCSV_FileName, Period_Count);
	//Update_Annual_Individual_CSV_CustomExp(Annual_Individual_CSV_FileName, Period_Count);
	//Update_Annual_Club_CSV_CustomExp(Annual_Club_CSV_FileName, Period_Count);
}

// Reset counters
Death_counter = 0;
Birth_counter = 0;
Immigrant_counter = 0;
Immigrant_counter_Mal = 0;
Immigrant_counter_Fem = 0;
Emigrant_counter = 0;
Emigrant_counter_Mal = 0;
Emigrant_counter_Fem = 0;
Counter_Female_Births = 0;
Counter_Male_Births = 0;

Reset_BR_DR_Pop_Per_Age();


// Update pop for next period, it is not current Pop cause population change due to immigration/emigration
Previous_Period_Pop = People.size();

/// count a new period
Period_Count ++;

People.forEach(Person::onPeriodStart);]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1519227897838</Id>
					<Name><![CDATA[Store_Init_Stats]]></Name>
					<X>500</X><Y>-160</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[/// Reset histograms
Hist_Age_Pop.reset();

// update Age histograms, emigrant histograms are updated in the state chart emigration, in person
for (Person p : People) { Hist_Age_Pop.add(p.Age); }

// Update population size, and generation counter
update_Population_Size();
Update_Generation_Counter();

// Record initial population
Previous_Period_Pop = People.size();
traceln("Initial Pop " + People.size());

//Update_Hist_CDF_Pop_Age();
//traceln("Males by Age " + Arrays.toString(Counter_Pop_By_Age_Mal));
//traceln("Females by Age " + Arrays.toString(Counter_Pop_By_Age_Fem));]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1630681736098</Id>
					<Name><![CDATA[init_delay]]></Name>
					<Description><![CDATA[Agent creation can't start at the first state for some reason - causes an initialization bug - so there's an extra state here just to add some delay.]]></Description>
					<X>500</X><Y>-300</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1519143896545</Id>
					<Name><![CDATA[statechart_Main]]></Name>
					<X>550</X><Y>-350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
					</Points>
					<Properties Target="1630681736098">
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519223970833</Id>
					<Name><![CDATA[transition5]]></Name>
					<X>550</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519227897838" Target="1519223963311" Trigger="message">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[52]]></Code>
							<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["continue_to_period_updates"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519227456590</Id>
					<Name><![CDATA[transition6]]></Name>
					<X>520</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>30</Y></Point>
						<Point><X>60</X><Y>30</Y></Point>
						<Point><X>60</X><Y>0</Y></Point>
					</Points>
					<IconOffset>60.0</IconOffset>
					<Properties Source="1519223963311" Target="1519223963311" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519227969127</Id>
					<Name><![CDATA[transition7]]></Name>
					<Description><![CDATA[the timeout is necessary so the initial agent population is created first and then the first populaiton of emigrants is selected from it.]]></Description>
					<X>550</X><Y>-210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519143896537" Target="1519227897838" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[0.1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<Guard><![CDATA[!skipExperimentFilter.test(this)]]></Guard>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["continue_to_store_initial_stats"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630681768693</Id>
					<Name><![CDATA[transition]]></Name>
					<X>550</X><Y>-270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>30</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630681736098" Target="1519143896537" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[!skipExperimentFilter.test(this)]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Events>
				<Event>
					<Id>1590737559808</Id>
					<Name><![CDATA[Trigger_Period_Updates]]></Name>
					<X>640</X><Y>-160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="occuresOnce">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1525766400000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[statechart_Main.fireEvent("continue_to_period_updates");]]></Action>
				</Event>
				<Event>
					<Id>1611587051954</Id>
					<Name><![CDATA[Agent_Yearly_Update_Trigger]]></Name>
					<X>1010</X><Y>-470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1611648000000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0.3]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[FiveYearStep ? 5 : 1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[if(skipExperimentFilter.test(this)) {
	return;
}

final String period = Periods.get(Period_Count);

// Set tp true to log population at every step.
if (false) {
	People.stream()
		.collect(Collectors.groupingBy(Cohort::asFertilityCohort))
		.entrySet()
		.forEach(e -> {
			double age = e.getKey().age;
			Gender_List gender = e.getKey().gender;
			
			writeRealRate(gender, e.getKey().curAge, e.getKey().curAge, "population", e.getValue().size());
		});	
	traceln("Population: " + People.size());
}

// For bottom up, each agent does their own yearly update individually with experimentation.
// For top down, population events are set exactly using sorting method.
if (!TopDown) {
	this.sendToAllConnected("Do_Yearly_Update");
	return;
}

final Random r = getDefaultRandomGenerator();
	
// Fertility
// Only half if split, otherwise all
double yearsExposure; 
if (FiveYearStep) {
	yearsExposure = splitFertility ? 2.5 : 5;
} else {
	yearsExposure = splitFertility ? 0.5 : 1.0;
}
do_fertility(period, r, yearsExposure, "");
	
// Mortality. All agent cohorts apply mortality via Survival Ratio
// Includes new infants
People.stream()
	.filter(this::includeInMortality)
	.collect(Collectors.groupingBy(Cohort::asDeathCohort))
	.entrySet()
	.forEach(e -> {
		double age = e.getKey().age;
		Gender_List gender = e.getKey().gender;
		List<Person> agents = new ArrayList<>(e.getValue());
		
		cohortMortality(age, period, agents, gender, r, e.getKey().curAge, "");
	});
	
// Aging
People.forEach(p -> p.Age += (FiveYearStep ? 5 : 1));

// Emigration
final Map<Cohort, Integer> emigrantsByCohort = DBUtils.getNumEmigrants(this, period);
People.stream()
	.filter(this::includeInMigration)
	.collect(Collectors.groupingBy(Cohort::asMigrationCohort))
	.entrySet()
	.forEach(e -> {
		double age = e.getKey().age;
		Gender_List gender = e.getKey().gender;
		
		Cohort migrationCohort = (ForceUseSplitAge && !FiveYearStep && age < 0) 
								? e.getKey()
								: Cohort.getMigrationCohort(age, gender);
		if (!emigrantsByCohort.containsKey(migrationCohort)) {
			return;
		}
		int numEmigrants = emigrantsByCohort.get(migrationCohort);
		List<Person> agents = new ArrayList<>(e.getValue());
		
		Collections.shuffle(agents, r);
		
		agents.subList(0, numEmigrants).forEach(Person::emigrate);
		
		writeRealRate(gender, age, e.getKey().curAge, "migration", -numEmigrants);
	});

// Immigration
final Map<Cohort, Integer> immigrantsByCohort = DBUtils.getNumImmigrants(this, period);
for (Cohort c : immigrantsByCohort.keySet()) {
	if (FiveYearStep || (ForceUseSplitAge && c.age == 0)) {
		makeNAgents(immigrantsByCohort.get(c), c.age, c.gender, NON_NATIVE);
		//writeRealRate(c.gender, c.age, c.age, "migration", immigrantsByCohort.get(c));
	} else {
		int numImmigrantsPerAge = (int) Math.rint(immigrantsByCohort.get(c) / 5.0);
		for (int i = 0; i <= 4; i++) {
			makeNAgents(numImmigrantsPerAge, c.age + i, c.gender, NON_NATIVE);
			//writeRealRate(c.gender, c.age + i, c.age + i, "migration", numImmigrantsPerAge);
		}
	}
}

// Second round of fertility for split fertility.
if (splitFertility) {
	do_fertility(period, r, FiveYearStep ? 2.5 : 0.5, "2nd");
	People.findAll(p -> p.Age < 0).stream()
		.collect(Collectors.groupingBy(Cohort::asDeathCohort))
		.entrySet()
		.forEach(e -> {
			double age = e.getKey().age;
			Gender_List gender = e.getKey().gender;
			List<Person> agents = new ArrayList<>(e.getValue());
			
			cohortMortality(age, period, agents, gender, r, age, "2nd");
		});
		
	
	People.findAll(p -> p.Age < 0)
		.forEach(p -> p.Age = 0);
}]]></Action>
				</Event>
				<Event>
					<Id>1631573281614</Id>
					<Name><![CDATA[Agent_Yearly_Update_Trigger_Second]]></Name>
					<X>1010</X><Y>-440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1611648000000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0.31]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[FiveYearStep ? 5 : 1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[if(skipExperimentFilter.test(this)) {
	return;
}

// For bottom up executions, we need to handle migration and second round of fertility
// at a second step in order to avoid some AnyLogic timing issues.

if (TopDown) {
	return;
}

final String period = Periods.get(Period_Count);

// Emigration
emigrationRateCache.clear();
People.findAll(p -> true).forEach(p -> p.do_emigration_round(period));

// Immigration
final Map<Cohort, Integer> immigrantsByCohort = DBUtils.getNumImmigrants(this, period);
for (Cohort c : immigrantsByCohort.keySet()) {
	if (FiveYearStep || (ForceUseSplitAge && c.age == 0)) {
		makeNAgents(immigrantsByCohort.get(c), c.age, c.gender, NON_NATIVE);
		//writeRealRate(c.gender, c.age, c.age, "migration", immigrantsByCohort.get(c));
	} else {
		int numImmigrantsPerAge = (int) Math.rint(immigrantsByCohort.get(c) / 5.0);
		for (int i = 0; i <= 4; i++) {
			makeNAgents(numImmigrantsPerAge, c.age + i, c.gender, NON_NATIVE);
			//writeRealRate(c.gender, c.age + i, c.age + i, "migration", numImmigrantsPerAge);
		}
	}
}

if (!splitFertility) {
	return;
}

// Second fertility for split fertility
People.findAll(p -> true).forEach(p -> p.do_fertility_round(period));]]></Action>
				</Event>
			</Events>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496338222835</Id>
					<Name><![CDATA[Generate_Agents]]></Name>
					<X>1020</X><Y>-380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[if (!TopDownInitialAgents) {
	for (int i = 0; i < Number_of_Adults; i++) {
		// Age and sex are set bottom up by each agent pulling from distributions.
		add_People();
	}
	return;
}

// For top down agent initialization, the age and sex of agents are
// chosen to perfectly match our distributions.
int initialNumMaleAgents = (int) Math.rint(Sex_Ratio_Init_Pop * Number_of_Adults);
int initialNumFemaleAgents = (int) Math.rint((1.0 - Sex_Ratio_Init_Pop) * Number_of_Adults);
List<Double> maleAgeWeights = DBUtils.getInitialAgeWeightsMale(this);
List<Double> femaleAgeWeights = DBUtils.getInitialAgeWeightsFemale(this);

double weightSum = 0;
{
	for (int i = 0; i < maleAgeWeights.size(); i++) {
		if (AgentInitializationPerAgeYear) {
			int numAgents = (int) Math.rint(maleAgeWeights.get(i) * initialNumMaleAgents);
			makeNAgents(numAgents, i, MALE, NATIVE);
			continue;
		}
	
		if (i % 5 == 0) {
			weightSum = 0;
		}
		
		weightSum += maleAgeWeights.get(i);
	
		if ((i + 1) % 5 == 0) {
			int numAgents = (int) Math.rint(initialNumMaleAgents * weightSum);
			makeNAgents(numAgents, (i / 5) * 5.0, MALE, NATIVE);
		}
	}
}
{
	for (int i = 0; i < femaleAgeWeights.size(); i++) {
		if (AgentInitializationPerAgeYear) {
			int numAgents = (int) Math.rint(femaleAgeWeights.get(i) * initialNumFemaleAgents);
			makeNAgents(numAgents, i, FEMALE, NATIVE);
			continue;
		}
	
		if (i % 5 == 0) {
			weightSum = 0;
		}
		
		weightSum += femaleAgeWeights.get(i);
	
		if ((i + 1) % 5 == 0) {
			int numAgents = (int) Math.rint(initialNumFemaleAgents * weightSum);
			makeNAgents(numAgents, (i / 5) * 5.0, FEMALE, NATIVE);
		}
	}
}



/*
if (TopDownInitialAgents) {
	Top_Down_Generate_Agents();
	return;
}

for (int i = 0; i < Number_of_Adults; i++)
{
	Person Citizen = add_People();
}
*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496854063650</Id>
					<Name><![CDATA[Count_Female]]></Name>
					<X>70</X><Y>1540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Females = findAll(People,p -> p.Gender == FEMALE);
return Females.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496854204174</Id>
					<Name><![CDATA[Count_Male]]></Name>
					<X>70</X><Y>1564</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Males = findAll(People,p -> p.Gender == MALE);
return Males.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496979903764</Id>
					<Name><![CDATA[Count_Native]]></Name>
					<X>320</X><Y>1540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Native = findAll(People,p -> p.Nativity == NATIVE);
return Native.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496979919845</Id>
					<Name><![CDATA[Count_Non_Native]]></Name>
					<X>320</X><Y>1560</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Non_Native = findAll(People,p -> p.Nativity == NON_NATIVE);
return Non_Native.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1540893879719</Id>
					<Name><![CDATA[Create_AnnualCSV_CustomExp]]></Name>
					<X>1360</X><Y>-240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[try
{
	//Check to see if the file already exists
	File checkFile = new File(FileName);
	
	if ( checkFile.exists() == false )
	{
		OutputStream csvFile;
		PrintStream printcsv;
		StringBuilder sb;
		
		sb = new StringBuilder();
		
		//Create a STRING header for each column in your output file
		sb.append("SimID"); sb.append(',');
		sb.append("Starting_Period"); sb.append(',');
		sb.append("country_id"); sb.append(',');
		sb.append("FiveYearStep"); sb.append(',');
		sb.append("TopDown"); sb.append(',');
		sb.append("TopDownInitialAgents"); sb.append(',');
		sb.append("AgentInitializationPerAgeYear"); sb.append(',');
		sb.append("ForceUseSplitAge"); sb.append(',');
		sb.append("NumberOfInitialAgents"); sb.append(',');
		sb.append("ImmigrantsImmuneFromDeath"); sb.append(',');
		sb.append("splitFertility"); sb.append(',');
		sb.append("Period"); sb.append(',');
				
		
		//Generate Simulation Output Fields
		sb.append("Birth_Rate"); sb.append(',');
		sb.append("Death_Rate"); sb.append(',');
		sb.append("Immigration_Rate"); sb.append(',');
		sb.append("Emigration_Rate"); sb.append(',');
		sb.append("Immigration_Rate_Mal"); sb.append(',');
		sb.append("Emigration_Rate_Mal"); sb.append(',');
		sb.append("Immigration_Rate_Fem"); sb.append(',');
		sb.append("Emigration_Rate_Fem"); sb.append(',');
		sb.append("Immigration_Counts"); sb.append(',');
		sb.append("Emigration_Counts"); sb.append(',');
		sb.append("Immigration_Counts_Mal"); sb.append(',');
		sb.append("Emigration_Counts_Mal"); sb.append(',');
		sb.append("Immigration_Counts_Fem"); sb.append(',');
		sb.append("Emigration_Counts_Fem"); sb.append(',');
		sb.append("Fertility_Rate"); sb.append(',');
		sb.append("Growth_Rate"); sb.append(',');
		sb.append("Previous_Period_Pop"); sb.append(',');
		sb.append("Current_Period_Pop"); sb.append(',');
		sb.append("Pop_Age_Mean"); sb.append(',');
		sb.append("Pop_Age_SD"); sb.append(',');
		sb.append("Mal_Age_Mean"); sb.append(',');
		sb.append("Mal_Age_SD"); sb.append(',');
		sb.append("Fem_Age_Mean"); sb.append(',');
		sb.append("Fem_Age_SD"); sb.append(',');
		sb.append("Sex_Ratio_At_Birth"); sb.append(',');
		sb.append("Num_Births"); sb.append(',');
		sb.append("Num_Deaths"); sb.append(',');
		for(int i=0; i < 10; i++) { sb.append("CDF_Age_Pop_");sb.append(i); sb.append(','); }
		for(int i=0; i < 10; i++) { sb.append("CDF_Age_Fem_");sb.append(i); sb.append(','); }
		for(int i=0; i < 10; i++) { sb.append("CDF_Age_Mal_");sb.append(i); sb.append(','); }
		for(int i=0; i < 35; i++) { sb.append("Prob_Birth_Fem_");sb.append(i); sb.append(','); }
		for(int i=0; i < 24; i++) { sb.append("Prob_Death_Age_Cat_Fem_");sb.append(i); sb.append(','); }
		for(int i=0; i < 24; i++) { sb.append("Prob_Death_Age_Cat_Mal_");sb.append(i); sb.append(','); }
		for(int i=0; i < 21; i++) { sb.append("Pop_by_Age_Mal");sb.append(i); sb.append(','); }
		for(int i=0; i < 21; i++) { sb.append("Pop_by_Age_Fem");sb.append(i); sb.append(','); }
							
		sb.append('\n');
		
		csvFile= new FileOutputStream(new File(FileName));
		
	    printcsv = new PrintStream(csvFile);
	    printcsv.append(sb.toString());
	    printcsv.close();
	    csvFile.close();
    }
    else
    {
		//System.out.println("File with selected name already exists!");		
	}
}	
catch (java.io.IOException e) 
{
	e.printStackTrace();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1540893879721</Id>
					<Name><![CDATA[Update_AnnualCSV_CustomExp]]></Name>
					<X>1360</X><Y>-220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[CurrentYear]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[try {
	FileWriter pw = new FileWriter(FileName, true);
	//System.out.println("Time : " + Period_Count + ", Filename: " + FileName);
	
	StringBuilder sb;
	sb = new StringBuilder();
	
	//Grab the actual parameter values now (do not create STRING headers). 
	//Use the EXACT same order as the CreateCSV() function
	sb.append(SimulationID); sb.append(',');
	sb.append(Starting_Period); sb.append(',');
	sb.append(country_id); sb.append(',');
	sb.append(FiveYearStep); sb.append(',');
	sb.append(TopDown); sb.append(',');
	sb.append(TopDownInitialAgents); sb.append(',');
	sb.append(AgentInitializationPerAgeYear); sb.append(',');
	sb.append(ForceUseSplitAge); sb.append(',');
	sb.append(Number_of_Adults); sb.append(',');
	sb.append(ImmigrantsImmuneFromDeath); sb.append(',');
	sb.append(splitFertility); sb.append(',');
	if(CurrentYear == -1) { sb.append("Initial"); sb.append(','); }
	else { sb.append(Periods.get(Period_Count)); sb.append(','); }
				
		
	//Generate Simulation Output Fields
	sb.append(Birth_Rate*100); sb.append(',');
	sb.append(Death_Rate*100); sb.append(',');
	sb.append(Immigration_Rate); sb.append(',');
	sb.append(Emigration_Rate); sb.append(',');
	sb.append(Immigration_Rate_Mal); sb.append(',');
	sb.append(Emigration_Rate_Mal); sb.append(',');
	sb.append(Immigration_Rate_Fem); sb.append(',');
	sb.append(Emigration_Rate_Fem); sb.append(',');
	sb.append(Immigrant_counter); sb.append(',');
	sb.append(Emigrant_counter); sb.append(',');
	sb.append(Immigrant_counter_Mal); sb.append(',');
	sb.append(Emigrant_counter_Mal); sb.append(',');
	sb.append(Immigrant_counter_Fem); sb.append(',');
	sb.append(Emigrant_counter_Fem); sb.append(',');
	sb.append(Fertility_rate); sb.append(',');
	sb.append(Growth_Rate); sb.append(',');
	sb.append(Previous_Period_Pop); sb.append(',');
	sb.append(People.size()); sb.append(',');
	sb.append(Hist_Age_Pop.mean()); sb.append(',');
	sb.append(Hist_Age_Pop.deviation()); sb.append(',');
	sb.append(Hist_Age_Mal.mean()); sb.append(',');
	sb.append(Hist_Age_Mal.deviation()); sb.append(',');
	sb.append(Hist_Age_Fem.mean()); sb.append(',');
	sb.append(Hist_Age_Fem.deviation()); sb.append(',');
	sb.append(Sex_Ratio_At_Birth); sb.append(',');
	sb.append(Birth_counter); sb.append(',');
	sb.append(Death_counter); sb.append(',');
	for(int i=0; i < CDF_Age_Pop.length; i++) { sb.append(CDF_Age_Pop[i]); sb.append(',');}
	for(int i=0; i < CDF_Age_Fem.length; i++) { sb.append(CDF_Age_Fem[i]); sb.append(',');}
	for(int i=0; i < CDF_Age_Mal.length; i++) { sb.append(CDF_Age_Mal[i]); sb.append(',');}
	for(int i=0; i < BR_Per_Age.length; i++) { sb.append(BR_Per_Age[i]); sb.append(',');}
	for(int i=0; i < DR_Per_Age_Fem.length; i++) { sb.append(DR_Per_Age_Fem[i]); sb.append(',');}
	for(int i=0; i < DR_Per_Age_Mal.length; i++) { sb.append(DR_Per_Age_Mal[i]); sb.append(',');}
	for(int i=0; i < Counter_Pop_By_Age_Mal.length; i++) { sb.append(Counter_Pop_By_Age_Mal[i]); sb.append(',');}
	for(int i=0; i < Counter_Pop_By_Age_Fem.length; i++) { sb.append(Counter_Pop_By_Age_Fem[i]); sb.append(',');}
		
	//Shift to the next line for the next run
	sb.append('\n');
						

	pw.append(sb);
    pw.flush();
    pw.close();
}
catch (java.io.IOException e) {
	e.printStackTrace();
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1540893879723</Id>
					<Name><![CDATA[Create_Annual_Individual_CSV_CustomExp]]></Name>
					<X>1360</X><Y>-170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[try
{
	//Check to see if the file already exists
	File checkFile = new File(FileName);
	
	if ( checkFile.exists() == false )
	{
		OutputStream csvFile;
		PrintStream printcsv;
		StringBuilder sb;
		
		sb = new StringBuilder();
		
		//Create a STRING header for each column in your output file
		sb.append("SimID"); sb.append(',');
		sb.append("Year"); sb.append(',');
		
		for(int i=0; i < 24; i++) { sb.append("Num_Deaths_Age_Fem_");sb.append(i); sb.append(','); }
		for(int i=0; i < 24; i++) { sb.append("Num_Deaths_Age_Mal_");sb.append(i); sb.append(','); }
		
		
		sb.append('\n');
		
		csvFile= new FileOutputStream(new File(FileName));
		
	    printcsv = new PrintStream(csvFile);
	    printcsv.append(sb.toString());
	    printcsv.close();
	    csvFile.close();
    }
    else
    {
		//System.out.println("File with selected name already exists!");		
	}
}	
catch (java.io.IOException e) 
{
	e.printStackTrace();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1540893879725</Id>
					<Name><![CDATA[Update_Annual_Individual_CSV_CustomExp]]></Name>
					<X>1360</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[CurrentYear]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[try {
	FileWriter pw = new FileWriter(FileName, true);
	//System.out.println("Time : " + Period_Count + ", Filename: " + FileName);
	
	StringBuilder sb;
	sb = new StringBuilder();

	sb.append(SimulationID); sb.append(',');
	sb.append(CurrentYear); sb.append(',');
				
		
	//Generate Simulation Output Fields
	for(int i=0; i < DR_Per_Age_Fem.length; i++) { sb.append(DR_Per_Age_Fem[i]); sb.append(',');}
	for(int i=0; i < DR_Per_Age_Mal.length; i++) { sb.append(DR_Per_Age_Mal[i]); sb.append(',');}
		
	//Shift to the next line for the next run
	sb.append('\n');
					

	pw.append(sb);
    pw.flush();
    pw.close();
}
catch (java.io.IOException e) {
	e.printStackTrace();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1541740460392</Id>
					<Name><![CDATA[Create_Annual_Club_CSV_CustomExp]]></Name>
					<X>1360</X><Y>-110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[/*try
{
	//Check to see if the file already exists
	File checkFile = new File(FileName);
	
	if ( checkFile.exists() == false )
	{
		OutputStream csvFile;
		PrintStream printcsv;
		StringBuilder sb;
		
		sb = new StringBuilder();
		
		//Create a STRING header for each column in your output file
		sb.append("SimID"); sb.append(',');
		sb.append("Year"); sb.append(',');
		sb.append("ID"); sb.append(',');
		sb.append("WV_Flag"); sb.append(',');
		sb.append("Rel_Flag"); sb.append(',');
		sb.append("PI_Flag"); sb.append(',');
		sb.append("Cost_Flag"); sb.append(',');
		sb.append("Cost"); sb.append(',');
		sb.append("Neighborhood"); sb.append(',');
		sb.append("Num_Members"); sb.append(',');
		sb.append("Leader"); sb.append(',');
		sb.append("Average_WV_Club"); sb.append(',');
		sb.append("Average_PI_Club"); sb.append(',');
		
		sb.append('\n');
		
		csvFile= new FileOutputStream(new File(FileName));
		
	    printcsv = new PrintStream(csvFile);
	    printcsv.append(sb.toString());
	    printcsv.close();
	    csvFile.close();
    }
    else
    {
		//System.out.println("File with selected name already exists!");		
	}
}	
catch (java.io.IOException e) 
{
	e.printStackTrace();
}*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1541740460395</Id>
					<Name><![CDATA[Update_Annual_Club_CSV_CustomExp]]></Name>
					<X>1360</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[CurrentYear]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[/*
try {
	FileWriter pw = new FileWriter(FileName, true);
	//System.out.println("Time : " + Period_Count + ", Filename: " + FileName);
	
	StringBuilder sb;
	sb = new StringBuilder();

	//List <Person> Individuals = findAll(People,p -> p.Age >= 12);
	for (WVGroup g: WVGroups)//Individuals)
	{
		//Grab the actual parameter values now (do not create STRING headers). 
		//Use the EXACT same order as the CreateCSV() function
		//Create a STRING header for each column in your output file
		sb.append(SimulationID); sb.append(',');
		sb.append(Period_Count); sb.append(',');
		sb.append(g.getId()); sb.append(',');
		sb.append(g.WV_Flag); sb.append(',');
		if(g.WV_Flag == RELIGIOUS) { sb.append(g.Rel_flag); sb.append(','); } else { sb.append("NA"); sb.append(','); }
		sb.append(g.PI_flag); sb.append(',');
		sb.append(g.Cost_Flag); sb.append(',');
		sb.append(g.Cost); sb.append(',');
		sb.append(g.Group_Neighborhood); sb.append(',');
		sb.append(g.Current_Affiliated); sb.append(',');
		if(g.Leader != null) { sb.append(g.Leader.getId()); sb.append(','); } else { sb.append("NA"); sb.append(','); }
		sb.append(g.Average_WV()); sb.append(',');
		sb.append(g.Average_PI()); sb.append(',');
		//Shift to the next line for the next run
		sb.append('\n');
	} // end over all people
						

	pw.append(sb);
    pw.flush();
    pw.close();
}
catch (java.io.IOException e) {
	e.printStackTrace();
}
*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1590738491359</Id>
					<Name><![CDATA[Count_Semi_Native]]></Name>
					<X>320</X><Y>1580</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Semi_Native = findAll(People,p -> p.Nativity == SEMI_NATIVE);
return Semi_Native.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1590739244421</Id>
					<Name><![CDATA[Calculate_Fertility_rate]]></Name>
					<X>140</X><Y>1970</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[/// Start only at period 7, when females that were 15 years old at period 0 are now over 49 years old, Period_Count starts from 0
return 0;
/*
if (Period_Count >= 6)
{
	/// Filter out female immigrants that came with an age > 15 years old, this immigrants may have already had a kid but it was not counted	
	/// this is done so we only get the females that live their whole birth life-span in the society
	final int Max_Age_Gen0 = 15 * (Period_Count * 5);
	List <Person> Gen_0 = findAll(People,p -> p.Gender == FEMALE && p.Nativity != NON_NATIVE && p.Generation == 1 && p.Age >= 49 && p.Age <= Max_Age_Gen0);
	List <Person> Fem_FR = findAll(People, p -> p.Gender == FEMALE && p.Nativity != NON_NATIVE && p.Generation > 1 && p.Age >= 49);
	Fem_FR.addAll(Gen_0);
	
	double FR = average( Fem_FR, p -> p.My_Children );
	//Fertili
	return FR;
}
else { return 0;}*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1590742906401</Id>
					<Name><![CDATA[Update_Generation_Counter]]></Name>
					<X>310</X><Y>-80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[int count = 0;
Generation_Counter[0] = findAll(People,p-> p.Generation == 1).size();
Generation_Counter[1] = findAll(People,p-> p.Generation == 2).size();
Generation_Counter[2] = findAll(People,p-> p.Generation == 3).size();
Generation_Counter[3] = findAll(People,p-> p.Generation == 4).size();
Generation_Counter[4] = findAll(People,p-> p.Generation == 5).size();
Generation_Counter[5] = findAll(People,p-> p.Generation == 6).size();
Generation_Counter[6] = findAll(People,p-> p.Generation == 7).size();
Generation_Counter[7] = findAll(People,p-> p.Generation == 8).size();
Generation_Counter[8] = findAll(People,p-> p.Generation == 9).size();
Generation_Counter[9] = findAll(People,p-> p.Generation == 10).size();

Generation_Counter[10] = findAll(People,p-> p.Generation == 11).size();
Generation_Counter[11] = findAll(People,p-> p.Generation == 12).size();
Generation_Counter[12] = findAll(People,p-> p.Generation == 13).size();
Generation_Counter[13] = findAll(People,p-> p.Generation == 14).size();
Generation_Counter[14] = findAll(People,p-> p.Generation == 15).size();
Generation_Counter[15] = findAll(People,p-> p.Generation == 16).size();
Generation_Counter[16] = findAll(People,p-> p.Generation == 17).size();
Generation_Counter[17] = findAll(People,p-> p.Generation == 18).size();
Generation_Counter[18] = findAll(People,p-> p.Generation == 19).size();
Generation_Counter[19] = findAll(People,p-> p.Generation == 20).size();

Generation_Counter[20] = findAll(People,p-> p.Generation == 21).size();
Generation_Counter[21] = findAll(People,p-> p.Generation == 22).size();
Generation_Counter[22] = findAll(People,p-> p.Generation == 23).size();
Generation_Counter[23] = findAll(People,p-> p.Generation == 24).size();
Generation_Counter[24] = findAll(People,p-> p.Generation == 25).size();
Generation_Counter[25] = findAll(People,p-> p.Generation == 26).size();
Generation_Counter[26] = findAll(People,p-> p.Generation == 27).size();
Generation_Counter[27] = findAll(People,p-> p.Generation == 28).size();
Generation_Counter[28] = findAll(People,p-> p.Generation == 29).size();
Generation_Counter[29] = findAll(People,p-> p.Generation == 30).size();

Generation_Counter[30] = findAll(People,p-> p.Generation == 31).size();
Generation_Counter[31] = findAll(People,p-> p.Generation == 32).size();
Generation_Counter[32] = findAll(People,p-> p.Generation == 33).size();
Generation_Counter[33] = findAll(People,p-> p.Generation == 34).size();
Generation_Counter[34] = findAll(People,p-> p.Generation == 35).size();
Generation_Counter[35] = findAll(People,p-> p.Generation == 36).size();
Generation_Counter[36] = findAll(People,p-> p.Generation == 37).size();
Generation_Counter[37] = findAll(People,p-> p.Generation == 38).size();
Generation_Counter[38] = findAll(People,p-> p.Generation == 39).size();
Generation_Counter[39] = findAll(People,p-> p.Generation == 40).size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1599483590485</Id>
					<Name><![CDATA[Update_Hist_CDF_Pop_Age]]></Name>
					<X>990</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// Pop both sexes
for (Person p : People) { Hist_Age_Pop.add(p.Age); }
// Pop females
List <Person> Fem = findAll(People, p -> p.Gender == FEMALE); 
for (Person p : Fem) {  Hist_Age_Fem.add(p.Age); }
// Pop males
List <Person> Mal = findAll(People, p -> p.Gender == MALE); 
for (Person p : Mal)  { Hist_Age_Mal.add(p.Age); }


for (int i=0; i < CDF_Age_Pop.length; i++)
{
	double temp_age = 10 * (i+1);
	List <Person> temp_pop = findAll(People, p -> p.Age < temp_age); 
	List <Person> temp_pop_fem = findAll(Fem, p -> p.Age < temp_age); 
	List <Person> temp_pop_mal = findAll(Mal, p -> p.Age < temp_age); 
	
	CDF_Age_Pop[i]= (double) temp_pop.size() / People.size();
	CDF_Age_Fem[i]= (double) temp_pop_fem.size() / Fem.size();
	CDF_Age_Mal[i]= (double) temp_pop_mal.size() / Mal.size();
}

for (int i=0; i < Counter_Pop_By_Age_Mal.length; i++)
{
	if( i != 20) // individuals < 100 years old
	{
		double min_Age = 5 * i;
		double max_Age = 5 * (i + 1);
		List <Person> temp_pop_fem = findAll(Fem, p -> p.Age >= min_Age && p.Age < max_Age); 
		List <Person> temp_pop_mal = findAll(Mal, p -> p.Age >= min_Age && p.Age < max_Age);
	
		Counter_Pop_By_Age_Mal[i]= temp_pop_mal.size();
		Counter_Pop_By_Age_Fem[i]= temp_pop_fem.size();
	}
	else if ( i == 20) // indiviudals 100+ years old
	{
		double min_Age = 5 * i;
		List <Person> temp_pop_fem = findAll(Fem, p -> p.Age >= min_Age); 
		List <Person> temp_pop_mal = findAll(Mal, p -> p.Age >= min_Age);
	
		Counter_Pop_By_Age_Mal[i]= temp_pop_mal.size();
		Counter_Pop_By_Age_Fem[i]= temp_pop_fem.size();
	}
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1599487605744</Id>
					<Name><![CDATA[Update_BR_DR_per_Age]]></Name>
					<X>990</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[for (int i=0; i < BR_Per_Age.length; i++)
{
	double num = BR_Per_Age[i];
	double den = Counter_BR_Per_Age[i];
	BR_Per_Age[i] = num / den;
}

for (int i=0; i < DR_Per_Age_Fem.length; i++)
{
	double num_fem = DR_Per_Age_Fem[i];
	double den_fem = Counter_DR_Per_Age_Fem[i];
	double num_mal = DR_Per_Age_Mal[i];
	double den_mal = Counter_DR_Per_Age_Mal[i];
	DR_Per_Age_Fem[i] = num_fem / den_fem;
	DR_Per_Age_Mal[i] = num_mal / den_mal;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1599488402230</Id>
					<Name><![CDATA[Reset_BR_DR_Pop_Per_Age]]></Name>
					<X>990</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[for (int i=0; i < BR_Per_Age.length; i++)
{
	BR_Per_Age[i] = 0;
	Counter_BR_Per_Age[i] = 0;
}

for (int i=0; i < DR_Per_Age_Fem.length; i++)
{
	DR_Per_Age_Fem[i] = 0;
	DR_Per_Age_Mal[i] = 0;
	Counter_DR_Per_Age_Fem[i] = 0;
	Counter_DR_Per_Age_Mal[i] = 0;
}

for (int i=0; i < Counter_Pop_By_Age_Mal.length; i++)
{
	Counter_Pop_By_Age_Mal[i]= 0;
	Counter_Pop_By_Age_Fem[i]= 0;
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1619808714022</Id>
					<Name><![CDATA[writeRealRate]]></Name>
					<X>1360</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[using_age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[cur_age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[rate_type]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[val]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[//experiment_id,year,gender,age,type,val

// This function can be used for lower level logging for 
// debugging purposes. Set LOG to true (and maybe adjust some of the
// other condition) in order to enable logging.

final boolean LOG = false;

if (!LOG || !(LHS_Experiment_Number == 1 
		&& splitFertility && 
		ForceUseSplitAge && 
		ImmigrantsImmuneFromDeath
)) {
	return;
}

if (true) {
	StringBuilder sb = new StringBuilder();
	
	sb.append(country_id); sb.append(',');
	sb.append(this.time()); sb.append(',');
	sb.append(gender.toString()); sb.append(',');
	sb.append(using_age); sb.append(',');
	sb.append(cur_age); sb.append(',');
	sb.append(rate_type); sb.append(',');
	sb.append(val);
	
	/*
	sb.append('\''); sb.append(cohort); sb.append(',');
	sb.append(size); sb.append(',');
	sb.append(size_with_mig < 0 ? "NA" : String.valueOf(size_with_mig)); sb.append(',');
	sb.append(num_deaths); sb.append(',');
	sb.append(((Number) num_deaths).doubleValue() / size); sb.append(',');
	sb.append(size_with_mig < 0 
				? "NA" 
				: String.valueOf(((Number) num_deaths).doubleValue() / size_with_mig));
	sb.append(',');
	if (rate_type.equals("mort")) {
		sb.append("NA");
	}	
	if (rate_type.equals("fert")) {
		int startAge = Integer.parseInt(cohort.substring(0,2));
		sb.append(Get_Yearly_Birth_Chance(period, startAge));
	}		
	*/
	sb.append('\n');
	try {
		Experiment e = this.getExperiment();
		Class clazz = e.getClass();
		
		Field writerField = clazz.getDeclaredField("realRatesWriter");
		BufferedWriter writer = (BufferedWriter) writerField.get(e);
		
		writer.write(sb.toString());
	} catch (NoSuchFieldException e) {
	
		throw new RuntimeException("No such file exception");
	} catch (IllegalAccessException e) {
		
		throw new RuntimeException("Illegal Access");
	} catch (IOException e) {
		throw new RuntimeException("IO:" + e.getMessage());
	}
	
}
	]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1621883216746</Id>
					<Name><![CDATA[simulationIsOver]]></Name>
					<Description><![CDATA[Since we have some simulations with different starting periods, we need a signal to "terminate" the simulation early.]]></Description>
					<X>850</X><Y>-180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[return Period_Count >= 30;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631549804654</Id>
					<Name><![CDATA[makeNAgents]]></Name>
					<X>1020</X><Y>-360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[n]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[nativity]]></Name>
						<Type><![CDATA[Nativity_Level]]></Type>
					</Parameter>
					<Body><![CDATA[
boolean written = false;

for (int i = 0; i < n; i++) {
	Person p = add_People();
	p.Age = age;
	p.Gender = gender;
	p.Nativity = nativity;
	if (nativity == NATIVE) {
		p.onPeriodStart();
	} else {
		p.setAgesImmigrant();
		if (!written) {
			writeRealRate(gender, p.Age_At_Period_Start, p.Age, "migration", n);
			written = true;
		}
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631562419253</Id>
					<Name><![CDATA[do_fertility]]></Name>
					<X>1355</X><Y>-475</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[r]]></Name>
						<Type><![CDATA[Random]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[yearsExposure]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[suffix]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[People.stream()
	.filter(p -> Cohort.asFertilityCohort(p).isChildBearing())
	.collect(Collectors.groupingBy(Cohort::asFertilityCohort))
	.entrySet().stream()
	.forEach(e -> {
		double age = e.getKey().age;
		List<Person> agents = new ArrayList<>(e.getValue());
		
		double fertRate = DBUtils.getYearlyFertilityRate(this, period, (int) age);
		int numBirthsInCohort = (int) Math.rint(fertRate * yearsExposure * agents.size());
		double malePercInfants = DBUtils.getInfantSexRatio(this, period);
		int numMaleInfants = (int) Math.rint(malePercInfants * numBirthsInCohort);
		
		writeRealRate(FEMALE, age, e.getKey().curAge, "numBirthsMales" + suffix, numMaleInfants);
		writeRealRate(FEMALE, age, e.getKey().curAge, "numBirthsFemales" + suffix, numBirthsInCohort - numMaleInfants);
		
		for (int i = 0; i < numBirthsInCohort; i++) {
			Person randomMother = agents.get(r.nextInt(agents.size()));
			randomMother.do_birth((int) randomMother.Age, /*isMale=*/ i < numMaleInfants ? MALE : FEMALE);
		}
	});]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631562730074</Id>
					<Name><![CDATA[cohortMortality]]></Name>
					<X>1355</X><Y>-455</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[agents]]></Name>
						<Type><![CDATA[List<Person>]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[r]]></Name>
						<Type><![CDATA[Random]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[curAge]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[suffix]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[double deathRate;
if (age < 0 && !this.FiveYearStep && this.ForceUseSplitAge) {
       deathRate = DBUtils.getInfantDeathRate(this, period, curAge, gender);
} else {
       deathRate = DBUtils.getDeathRateFromSurvivalRatio(this, period, age, gender);
}
int numDeaths = (int) Math.rint(deathRate * agents.size());
Collections.shuffle(agents, r);
agents.subList(0, numDeaths).forEach(p -> p.die((int) p.Age));

writeRealRate(gender, age, curAge, "mortality" + suffix, numDeaths);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1637952431208</Id>
					<Name><![CDATA[includeInMortality]]></Name>
					<X>1355</X><Y>-435</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[p]]></Name>
						<Type><![CDATA[Person]]></Type>
					</Parameter>
					<Body><![CDATA[if (!FiveYearStep) {
	// In one year step, immigrants may be immune from death if
	// ImmigraantsImmuneFromDeath == true
	return (!ImmigrantsImmuneFromDeath || !p.immigrated_this_period);
}

return true;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1637952890062</Id>
					<Name><![CDATA[includeInMigration]]></Name>
					<X>1355</X><Y>-415</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[p]]></Name>
						<Type><![CDATA[Person]]></Type>
					</Parameter>
					<Body><![CDATA[if (!FiveYearStep) {
	// In one year step, someone could age to be >= 85, and they should
	// not emigrate
	if (p.Age >= 85) {
		return false;
	}
}

// Immigrants from this period will not be selected to emigrate.
if (p.immigrated_this_period) {
       return false;
}


return true;]]></Body>
				</Function>
			</Functions>
			<CustomDistributions>
				<CustomDistribution>
					<Id>1600422717643</Id>
					<Name><![CDATA[AgeDistInitial_Male]]></Name>
					<X>620</X><Y>-210</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<InterpolationMethod>NONE</InterpolationMethod>
					<Type>DISCRETE</Type>
					<DefinitionType>HISTOGRAM</DefinitionType>
					<Static>false</Static>
					<LoadFromDatabase><![CDATA[true]]></LoadFromDatabase>
					<RangesQuery>
					<TableReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
					</TableReference>
					<Condition>
						<ColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
							<ItemName><![CDATA[country_id]]></ItemName>
						</ColumnReference>
						<Value Class="CodeValue">
							<Code><![CDATA[country_id]]></Code>
						</Value>
						<Operator>EQUALS</Operator>
					</Condition>
						<StartColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
							<ItemName><![CDATA[start]]></ItemName>
						</StartColumnReference>
						<EndColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
							<ItemName><![CDATA[end]]></ItemName>
						</EndColumnReference>
						<NumberOfObservationColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
							<ItemName><![CDATA[weight]]></ItemName>
						</NumberOfObservationColumnReference>
					</RangesQuery>
					<FrequencyQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
						<WeightColumnReference>
						</WeightColumnReference>
					</FrequencyQuery>
					<SampleQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
					</SampleQuery>
					<OptionQuery>
					<TableReference>
					</TableReference>
						<OptionColumnReference>
						</OptionColumnReference>
						<NumberOfObservationColumnReference>
						</NumberOfObservationColumnReference>
					</OptionQuery>										
					<OptionListID><![CDATA[0]]></OptionListID>
					<OptionValues>				
					</OptionValues>				
				</CustomDistribution>
				<CustomDistribution>
					<Id>1600422765066</Id>
					<Name><![CDATA[AgeDistInitial_Female]]></Name>
					<X>620</X><Y>-190</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<InterpolationMethod>NONE</InterpolationMethod>
					<Type>DISCRETE</Type>
					<DefinitionType>HISTOGRAM</DefinitionType>
					<Static>false</Static>
					<LoadFromDatabase><![CDATA[true]]></LoadFromDatabase>
					<RangesQuery>
					<TableReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
					</TableReference>
					<Condition>
						<ColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
							<ItemName><![CDATA[country_id]]></ItemName>
						</ColumnReference>
						<Value Class="CodeValue">
							<Code><![CDATA[country_id]]></Code>
						</Value>
						<Operator>EQUALS</Operator>
					</Condition>
						<StartColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
							<ItemName><![CDATA[start]]></ItemName>
						</StartColumnReference>
						<EndColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
							<ItemName><![CDATA[end]]></ItemName>
						</EndColumnReference>
						<NumberOfObservationColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
							<ItemName><![CDATA[weight]]></ItemName>
						</NumberOfObservationColumnReference>
					</RangesQuery>
					<FrequencyQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
						<WeightColumnReference>
						</WeightColumnReference>
					</FrequencyQuery>
					<SampleQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
					</SampleQuery>
					<OptionQuery>
					<TableReference>
					</TableReference>
						<OptionColumnReference>
						</OptionColumnReference>
						<NumberOfObservationColumnReference>
						</NumberOfObservationColumnReference>
					</OptionQuery>										
					<OptionListID><![CDATA[0]]></OptionListID>
					<OptionValues>				
					</OptionValues>				
				</CustomDistribution>		
			</CustomDistributions>
			<AnalysisData>
    			<HistogramData>
					<Id>1573572859432</Id>
					<Name><![CDATA[Hist_Age_Pop]]></Name>
					<X>130</X><Y>1830</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>21</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[100]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
    			<HistogramData>
					<Id>1573572859543</Id>
					<Name><![CDATA[Hist_Age_Imm]]></Name>
					<X>410</X><Y>1830</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[52]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>18</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[90]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
    			<HistogramData>
					<Id>1590744186430</Id>
					<Name><![CDATA[Hist_Age_Emi]]></Name>
					<X>710</X><Y>1830</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[52]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>18</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[90]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
    			<HistogramData>
					<Id>1598885958789</Id>
					<Name><![CDATA[Hist_Age_Mal]]></Name>
					<X>130</X><Y>1850</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[52]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>21</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[100]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
    			<HistogramData>
					<Id>1598885971934</Id>
					<Name><![CDATA[Hist_Age_Fem]]></Name>
					<X>130</X><Y>1870</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[52]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>21</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[100]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
			</AnalysisData>
			<AgentLinks>
				<AgentLink>
					<Id>1494655951604</Id>
					<Name><![CDATA[connections]]></Name>
					<X>-60</X><Y>-30</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<StatechartReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
						<ItemName><![CDATA[statechart_Main]]></ItemName>
					</StatechartReference>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<EmbeddedObjects>
				<EmbeddedObject>
					<Id>1494665518928</Id>
					<Name><![CDATA[People]]></Name>
					<X>60</X><Y>100</Y>
					<Label><X>-30</X><Y>-30</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<PresentationId>1527173962293</PresentationId>
					<ActiveObjectClass>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[Person]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[Person]]></ClassName>
							<ItemName><![CDATA[1494658786006]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
					</Parameters>
					<ReplicationFlag>true</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[1000]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialSpeedCode Class="CodeUnitValue">
						<Code><![CDATA[10]]></Code>
						<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
					</InitialSpeedCode>
					<InitialLocationType>XYZ</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[normal(0.01, self.Living_Location.getLatitude())
//uniform(51.39, 51.63)]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[normal(0.01, self.Living_Location.getLongitude())
//uniform(-0.38,0.19)]]></Code>
					</LongitudeCode>
					<NodeCode><![CDATA[London]]></NodeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA["London City"]]></Code>
					</LocationNameCode>
					<InitializationType>EMPTY</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
			</EmbeddedObjects>

			<Presentation>
				<Level>
					<Id>1580971507779</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>

			<Presentation>
				<Rectangle>
					<Id>1655905878097</Id>
					<Name><![CDATA[rectangle]]></Name>
					<X>990</X><Y>-520</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>540</Width>
					<Height>180</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1496247861528</Id>
					<Name><![CDATA[Setup]]></Name>
					<X>-270</X><Y>38</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-5952982</Color>
					<Text><![CDATA[Setup Area Parameters]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1496788447856</Id>
					<Name><![CDATA[text4]]></Name>
					<X>780</X><Y>5</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Date]]></Text>
					<TextCode><![CDATA[date()]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1496788910773</Id>
					<Name><![CDATA[rectangle13]]></Name>
					<X>0</X><Y>40</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>4</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>120</Width>
					<Height>100</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1499992213942</Id>
					<Name><![CDATA[rectangle28]]></Name>
					<X>4</X><Y>2423</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>1000</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-14774017</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1499992213948</Id>
					<Name><![CDATA[text27]]></Name>
					<X>880</X><Y>2430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Date]]></Text>
					<TextCode><![CDATA[date()]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1499992233902</Id>
					<Name><![CDATA[rectangle33]]></Name>
					<X>3</X><Y>1233</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>1000</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-14774017</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1499992233908</Id>
					<Name><![CDATA[text32]]></Name>
					<X>890</X><Y>1240</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Date]]></Text>
					<TextCode><![CDATA[date()]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097179</Id>
					<Name><![CDATA[rectangle48]]></Name>
					<X>65</X><Y>1230</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>56</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869097181</Id>
					<Name><![CDATA[text41]]></Name>
					<X>71</X><Y>1241</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[_origin_VA.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Model]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097183</Id>
					<Name><![CDATA[rectangle49]]></Name>
					<X>135</X><Y>1230</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>116</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869097185</Id>
					<Name><![CDATA[text43]]></Name>
					<X>141</X><Y>1241</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewDescriptive_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Descriptive Stats]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097187</Id>
					<Name><![CDATA[rectangle50]]></Name>
					<X>265</X><Y>1231</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>66</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869097189</Id>
					<Name><![CDATA[text44]]></Name>
					<X>271</X><Y>1241</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewInferential_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Inf Stat 1]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097191</Id>
					<Name><![CDATA[rectangle51]]></Name>
					<X>342</X><Y>1230</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>69</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869097193</Id>
					<Name><![CDATA[text45]]></Name>
					<X>351</X><Y>1241</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Inf Stat 2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097195</Id>
					<Name><![CDATA[rectangle59]]></Name>
					<X>431</X><Y>1231</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>110</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1525869097199</Id>
					<Name><![CDATA[rectangle60]]></Name>
					<X>561</X><Y>1231</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>110</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1525869186045</Id>
					<Name><![CDATA[rectangle53]]></Name>
					<X>50</X><Y>2420</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>56</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869186047</Id>
					<Name><![CDATA[text46]]></Name>
					<X>56</X><Y>2431</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[_origin_VA.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Model]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869186049</Id>
					<Name><![CDATA[rectangle54]]></Name>
					<X>120</X><Y>2420</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>116</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869186051</Id>
					<Name><![CDATA[text48]]></Name>
					<X>126</X><Y>2431</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewDescriptive_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Descriptive Stats]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869186053</Id>
					<Name><![CDATA[rectangle55]]></Name>
					<X>250</X><Y>2421</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>66</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869186055</Id>
					<Name><![CDATA[text49]]></Name>
					<X>256</X><Y>2431</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewInferential_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Inf Stat 1]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869186057</Id>
					<Name><![CDATA[rectangle56]]></Name>
					<X>327</X><Y>2420</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>69</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869186059</Id>
					<Name><![CDATA[text50]]></Name>
					<X>336</X><Y>2431</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Inf Stat 2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869186061</Id>
					<Name><![CDATA[rectangle61]]></Name>
					<X>416</X><Y>2421</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>110</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1525869186065</Id>
					<Name><![CDATA[rectangle62]]></Name>
					<X>546</X><Y>2421</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>110</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<EmbeddedObjectPresentation>
					<Id>1527173962293</Id>
					<Name><![CDATA[People_presentation]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<DrawingMode>AGENT_CURRENT_POSITION</DrawingMode>
					<ScaleType>AUTOMATICALLY_CALCULATED</ScaleType>
					<GISScaleForRealEmbeddedObjectPresentationSize>1000</GISScaleForRealEmbeddedObjectPresentationSize>
					<GISScaleForFixedEmbeddedObjectPresentationSize>1000000000</GISScaleForFixedEmbeddedObjectPresentationSize>
					<Latitude>51.45927337291793</Latitude>
					<Longitude>-0.10239337313604584</Longitude>
				</EmbeddedObjectPresentation>
				<Text>
					<Id>1540893898431</Id>
					<Name><![CDATA[text21]]></Name>
					<X>1340</X><Y>-290</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Write Annual OutPutFiles]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1573723871218</Id>
					<Name><![CDATA[text80]]></Name>
					<X>61</X><Y>11</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[_origin_VA.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Model]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1573723871222</Id>
					<Name><![CDATA[text81]]></Name>
					<X>131</X><Y>11</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewDescriptive_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Descriptive Stats]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1573724201232</Id>
					<Name><![CDATA[rectangle99]]></Name>
					<X>680</X><Y>2420</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>120</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1573724218746</Id>
					<Name><![CDATA[rectangle100]]></Name>
					<X>690</X><Y>1230</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>120</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1655905468695</Id>
					<Name><![CDATA[text]]></Name>
					<X>-650</X><Y>20</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Mapping Inputs to variables]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1655905503377</Id>
					<Name><![CDATA[text1]]></Name>
					<X>110</X><Y>990</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[THE VISUALIZATIONS BELOW ARE DEPRECATED]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1655905761191</Id>
					<Name><![CDATA[text2]]></Name>
					<X>1000</X><Y>-510</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Most of the model execution after init is triggered / executed by theese methods
]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

				</Level>
			</Presentation>
			<Areas>
				<Area>
					<Id>1496786228388</Id>
					<Name><![CDATA[viewDescriptive_Statistics]]></Name>
					<X>0</X><Y>1230</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[Statistics]]></Title>
					<Width>1000</Width>
					<Height>810</Height>
				</Area>
				<Area>
					<Id>1496859807823</Id>
					<Name><![CDATA[viewInferential_Statistics]]></Name>
					<X>0</X><Y>2420</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[]]></Title>
					<Width>1000</Width>
					<Height>920</Height>
				</Area>
				<Area>
					<Id>1573723871358</Id>
					<Name><![CDATA[viewCRED_Descriptive_Stats3]]></Name>
					<X>0</X><Y>5</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[]]></Title>
					<Width>1000</Width>
					<Height>960</Height>
				</Area>
			</Areas>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1494658786011</Id>
			<Name><![CDATA[Person]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Import><![CDATA[import org.apache.log4j.helpers.AbsoluteTimeDateFormat;
import org.eclipse.jetty.util.log.StdErrLog;
//import jdk.internal.module.SystemModuleFinder;
import java.io.*;]]></Import>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1494658786006</Id>
				<Name><![CDATA[1494658786006]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1494662400000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1494658786007</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1580971507799</CurrentLevel>
			<ConnectionsId>1494658786041</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1494665224932</Id>
					<Name><![CDATA[Age]]></Name>
					<X>50</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1494667203108</Id>
					<Name><![CDATA[Nativity]]></Name>
					<X>50</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Nativity_Level]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[NATIVE]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1494688038046</Id>
					<Name><![CDATA[Gender]]></Name>
					<X>50</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Gender_List]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1496247409640</Id>
					<Name><![CDATA[Generation]]></Name>
					<X>50</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1520050291327</Id>
					<Name><![CDATA[Name]]></Name>
					<X>50</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[""]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590736383311</Id>
					<Name><![CDATA[My_Children]]></Name>
					<X>50</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1600377916077</Id>
					<Name><![CDATA[setAgeAndGenderCalled]]></Name>
					<X>290</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1637949880389</Id>
					<Name><![CDATA[Age_At_Period_Start]]></Name>
					<X>50</X><Y>350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1637949900410</Id>
					<Name><![CDATA[Age_At_Period_End]]></Name>
					<X>50</X><Y>380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1641237729573</Id>
					<Name><![CDATA[immigrated_this_period]]></Name>
					<X>50</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1655906739918</Id>
					<Name><![CDATA[Period_Survival]]></Name>
					<X>290</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1494665089154</Id>
					<Name><![CDATA[Year_Interaction]]></Name>
					<X>760</X><Y>220</Y>
					<Label><X>15</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="140" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1519229517453</Id>
					<Name><![CDATA[Yearly_Updates]]></Name>
					<X>830</X><Y>300</Y>
					<Label><X>5</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[final String period = get_Main().Periods.get(get_Main().Period_Count);
// Fertility
// Only half if split, otherwise all
do_fertility_round(period);

// Mortality
if (get_Main().includeInMortality(this)) {
	do_mortality_round(period);
}

// Aging
this.Age += get_Main().FiveYearStep ? 5 : 1;

// Migration and fertility round 2 are handled separately
// in the second agent update trigger in Main

this.statechart2.fireEvent("return_to_yearly_interaction");]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1520049194291</Id>
					<Name><![CDATA[Death_State]]></Name>
					<X>810</X><Y>450</Y>
					<Label><X>5</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="170" Height="30">
						<EntryAction><![CDATA[get_Main().Death_counter += 1;
this.disconnectFromAll();
get_Main().remove_People(this);]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1648600494353</Id>
					<Name><![CDATA[Delay]]></Name>
					<Description><![CDATA[Because of some initialization timing issues, we have to add some delay time here.]]></Description>
					<X>760</X><Y>120</Y>
					<Label><X>15</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="140" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1494665089160</Id>
					<Name><![CDATA[statechart2]]></Name>
					<X>830</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>70</Y></Point>
					</Points>
					<Properties Target="1648600494353">
						<Action><![CDATA[connectTo(get_Main());

// Immigrants variables are set when incoming in MAIN.
if(this.Nativity != NON_NATIVE)
{
	//Set_Religion();
	if (!setAgeAndGenderCalled) {
		Set_Age_Gender();
	}
	//Set_Age();
}

if (this.Nativity==NATIVE)
{
	this.shapeBody.setFillColor(green);
}
else 
{
	this.shapeBody.setFillColor(orange);
}]]></Action>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519229559527</Id>
					<Name><![CDATA[transition6]]></Name>
					<X>840</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-40</X><Y>-50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519229517453" Target="1494665089154" Trigger="message">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["return_to_yearly_interaction"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1600353203317</Id>
					<Name><![CDATA[transition10]]></Name>
					<X>910</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>120</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519229517453" Target="1520049194291" Trigger="message">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["die_right_now"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1648600558701</Id>
					<Name><![CDATA[transition]]></Name>
					<X>830</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>70</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1648600494353" Target="1494665089154" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[0.01]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1648600982995</Id>
					<Name><![CDATA[transition7]]></Name>
					<X>900</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>-10</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1494665089154" Target="1519229517453" Trigger="message">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["Do_Yearly_Update"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1655847849928</Id>
					<Name><![CDATA[transition1]]></Name>
					<Description><![CDATA[After initialization, this state should transition immediately.]]></Description>
					<X>880</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>1</X><Y>70</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1648600494353" Target="1494665089154" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[time(YEAR) >= 0.29]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[Gender_List]]></ReturnType>
					<Id>1494665089105</Id>
					<Name><![CDATA[Set_Age_Gender]]></Name>
					<X>530</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[setAgeAndGenderCalled = true;

/// Set age and gender of the initial population
/// Age and gender of the nascent population is set with funciton "Set_Gender_Nascent_Pop" called in the "Reproduction_Process" function.
if(time() < 0.2 && !get_Main().TopDownInitialAgents)
{
	//traceln("I am being initialized at init.");
	double mygender= uniform(1);
	//this.Flag = true;
	double Male_Percentage = get_Main().Sex_Ratio_Init_Pop;

	if (mygender < Male_Percentage)
	{
		this.Gender = MALE;
		this.Age = get_Main().AgeDistInitial_Male.getInt();
		if (!get_Main().AgentInitializationPerAgeYear) {
			this.Age = ((int)(this.Age / 5)) * 5.0;
		}
		/// half of the population will have X.5 and the other half X.0 years old
		//if(0.5 > uniform()){ this.Age += 0.5; }
		//traceln(this.Age);
		if (this.Nativity == NON_NATIVE) {	traceln(this.Nativity + " " + this.Gender + " " + this.Age); }
	}
	else
	{
		this.Gender = FEMALE;
		this.Age = get_Main().AgeDistInitial_Female.getInt();
		if (!get_Main().AgentInitializationPerAgeYear) {
			this.Age = ((int)(this.Age / 5)) * 5.0;
		}
		/// half of the population will have X.5 and the other half X.0 years old
		//if(0.5 > uniform()){ this.Age += 0.5; }
		
		//traceln(this.Age);
		if (this.Nativity == NON_NATIVE) {	traceln(this.Nativity + " " + this.Gender + " " + this.Age); }
	}

	this.Name = this.Gender.toString();
	this.onPeriodStart();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[String]]></ReturnType>
					<Id>1590420553339</Id>
					<Name><![CDATA[Get_death_cohort]]></Name>
					<X>530</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[Age]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[String deathRateSource = get_Main().Death_Rate_Source;
boolean dr_sr = deathRateSource.equals("SR");
boolean dr_pc = deathRateSource.equals("PC");

if (Age < 1) { return "0-1";}
if (Age < 5) { return (dr_sr || dr_pc) ? "0-4" : "1-4";}
else if (Age < 10) {return "5-9";}
else if (Age < 15) {return "10-14";}
else if (Age < 20) {return "15-19";}
else if (Age < 25) {return "20-24";}
else if (Age < 30) {return "25-29";}
else if (Age < 35) {return "30-34";}
else if (Age < 40) {return "35-39";}
else if (Age < 45) {return "40-44";}
else if (Age < 50) {return "45-49";}
else if (Age < 55) {return "50-54";}
else if (Age < 60) {return "55-59";}
else if (Age < 65) {return "60-64";}
else if (Age < 70) {return "65-69";}
else if (Age < 75) {return "70-74";}
else if (Age < 80) {return "75-79";}
else if (Age < 85) {return "80-84";}
else if (Age < 90) {return "85-89";}
else if (Age < 95) {return dr_pc ? "90-94" : "90-95";}
else if (Age < 100) {return dr_pc ? "95+" : "95-99";}
else if (Age < 105) {return dr_pc ? "95+" :"100-104";}
else if (Age >= 105) {return dr_pc ? "95+" :"105";}
else {traceln("Error: age cohort not found"); return "-1";}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[int]]></ReturnType>
					<Id>1599486758554</Id>
					<Name><![CDATA[Get_death_index]]></Name>
					<X>530</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[Age]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[// Index starts at 1 cause the new borns have a chance to die right away and in case they do, they get index 0
// this is done in Yearly_updates --> Reproduction process -->  Mortality new borns
if (Age < 1) { return 1;}
else if (Age < 5) {return 2;}
else if (Age < 10) {return 3;}
else if (Age < 15) {return 4;}
else if (Age < 20) {return 5;}
else if (Age < 25) {return 6;}
else if (Age < 30) {return 7;}
else if (Age < 35) {return 8;}
else if (Age < 40) {return 9;}
else if (Age < 45) {return 10;}
else if (Age < 50) {return 11;}
else if (Age < 55) {return 12;}
else if (Age < 60) {return 13;}
else if (Age < 65) {return 14;}
else if (Age < 70) {return 15;}
else if (Age < 75) {return 16;}
else if (Age < 80) {return 17;}
else if (Age < 85) {return 18;}
else if (Age < 90) {return 19;}
else if (Age < 95) {return 20;}
else if (Age < 100) {return 21;}
else if (Age < 105) {return 22;}
else if (Age >= 105) {return 23;}
else {traceln("Error: age cohort not found"); return -1;}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1611606691108</Id>
					<Name><![CDATA[die]]></Name>
					<X>530</X><Y>310</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[Age_adjusted]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[this.Period_Survival = false;
// update the death counters according to age and gender categories
if (this.Gender == MALE) { get_Main().DR_Per_Age_Mal[Get_death_index(Age_adjusted)] ++; }
if (this.Gender == FEMALE) { get_Main().DR_Per_Age_Fem[Get_death_index(Age_adjusted)] ++; } 

// Copied from Death_State
get_Main().Death_counter += 1;
this.disconnectFromAll();
get_Main().remove_People(this);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1611778941330</Id>
					<Name><![CDATA[do_birth]]></Name>
					<X>530</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[Age_adjusted]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Body><![CDATA[	this.My_Children += 1;
	Person NewChild = get_Main().add_People();
	NewChild.Generation = this.Generation + 1;
	NewChild.Age = get_Main().FiveYearStep ? -5 : -1;
	NewChild.Age_At_Period_Start = NewChild.Age;
	NewChild.Age_At_Period_End = 0;
	NewChild.Gender = gender;
	get_Main().Birth_counter += 1;
	get_Main().BR_Per_Age[(Age_adjusted - 15)] ++;
	if(this.Nativity == NON_NATIVE ) { NewChild.Nativity = SEMI_NATIVE; }
	
	if (!get_Main().TopDown) {
		NewChild.statechart2.fireEvent("Do_Yearly_Update");
		return;
	}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1614353175805</Id>
					<Name><![CDATA[Update_Counters]]></Name>
					<X>1060</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[
int Age_adjusted = (int) floor(this.Age);

// These counter may be broken

/// count the chance to die according to age adjusted category and gender	
if (this.Gender == MALE) { get_Main().Counter_DR_Per_Age_Mal[Get_death_index(Age_adjusted)] ++; }
if (this.Gender == FEMALE) { get_Main().Counter_DR_Per_Age_Fem[Get_death_index(Age_adjusted)] ++; } 	

if(this.Period_Survival == true && 
	   this.Gender == FEMALE && this.Age >= 15 && this.Age < 50) 
{ 
	/// count the chance to give birth according to the adjusted age
	get_Main().Counter_BR_Per_Age[(Age_adjusted - 15)] ++;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631561696913</Id>
					<Name><![CDATA[emigrate]]></Name>
					<X>530</X><Y>420</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[get_Main().Hist_Age_Emi.add(this.Age);
	//Emigrant_counter += 1;
	this.disconnectFromAll();
	get_Main().remove_People(this);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1631570670967</Id>
					<Name><![CDATA[coinFlip]]></Name>
					<X>50</X><Y>510</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[oddsTrue]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[double r = uniform();

return r < oddsTrue;
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631572524990</Id>
					<Name><![CDATA[do_fertility_round]]></Name>
					<X>530</X><Y>340</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[if (Cohort.asFertilityCohort(this).isChildBearing()) {
	double fertRate = DBUtils.getYearlyFertilityRate(get_Main(), period, (int) Age);
	int numChildren = 0;
	
	if (get_Main().FiveYearStep) {
		numChildren += coinFlip(fertRate) ? 1 : 0;
		numChildren += coinFlip(fertRate) ? 1 : 0;
		if (get_Main().splitFertility) {
			boolean haveSplitChild = coinFlip(fertRate / 2);
			numChildren +=  haveSplitChild ? 1 : 0;
		} else {
			numChildren += coinFlip(fertRate) ? 1 : 0;
			numChildren += coinFlip(fertRate) ? 1 : 0;
			numChildren += coinFlip(fertRate) ? 1 : 0;
		}
	} else {
		if (get_Main().splitFertility) {
			fertRate /= 2;
		}
		// An oddity of the 1 yr split fert bottom up model: agents can have 2 children in 1 yr
		boolean haveChild = coinFlip(fertRate);
		numChildren += haveChild ? 1 : 0;
	}
	
	double maleLikelihood = DBUtils.getInfantSexRatio(get_Main(), period);
	for (int i = 0; i < numChildren; i++) {
		this.do_birth((int) Age, coinFlip(maleLikelihood) ? MALE : FEMALE);
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631572848023</Id>
					<Name><![CDATA[do_emigration_round]]></Name>
					<X>530</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[// Emigration
double emRate = DBUtils.getEmigrationRate(get_Main(), period, this);
if (coinFlip(emRate)) {
	this.emigrate();
	return;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631574982886</Id>
					<Name><![CDATA[do_mortality_round]]></Name>
					<X>530</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[double mortRate;
if (Age_At_Period_Start < 0 && !get_Main().FiveYearStep && get_Main().ForceUseSplitAge) {
       mortRate = DBUtils.getInfantDeathRate(this.get_Main(), period, Age, Gender);
} else {
       mortRate = DBUtils.getDeathRateFromSurvivalRatio(this.get_Main(), period, Cohort.asDeathCohort(this).age, Gender);
}

//traceln(String.format("Age %f, Gender %s, DeathRate %f", this.Age, this.Gender, mortRate));

if (coinFlip(mortRate)) {
	this.die((int)Age);
	return;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1637949911279</Id>
					<Name><![CDATA[onPeriodStart]]></Name>
					<X>50</X><Y>440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[Age_At_Period_Start = Age;
Age_At_Period_End = Age + 5;
immigrated_this_period = false;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1639589052027</Id>
					<Name><![CDATA[setAgesImmigrant]]></Name>
					<X>50</X><Y>460</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[
if (get_Main().FiveYearStep) {
	return;
}


immigrated_this_period = true;

if (/*!get_Main().splitFertility && */ !get_Main().ForceUseSplitAge) {
	return;
}

if (0 <= Age && Age <= 4) {
	Age_At_Period_Start = -1;
	Age_At_Period_End = 0;
	return;
}

int year = (int) floor(time(YEAR));
int yearsPassedInPeriod = year % 5;
int yearsRemainingInPeriod = 5 - yearsPassedInPeriod;

Age_At_Period_End = Age;
Age_At_Period_Start = Age_At_Period_End - 5;
Age = Age_At_Period_Start + yearsPassedInPeriod + 1;]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1494658786041</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<StatechartReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[Person]]></ClassName>
						<ItemName><![CDATA[statechart2]]></ItemName>
					</StatechartReference>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1494665520173</Id>
					<Name><![CDATA[main]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1580971507799</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>

			<Presentation>
				<Group>
					<Id>1494658786013</Id>
					<Name><![CDATA[person]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>-20</X><Y>20</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>

			<Presentation>
				<Curve ControlPoints="true">
					<Id>1494658786015</Id>
					<Name><![CDATA[shapeBody]]></Name>
					<X>-2</X><Y>-7</Y>
					<Label><X>-20</X><Y>28</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor>-16777216</FillColor>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>4</Y><Z>0</Z></Point>
					   <Point><X>3</X><Y>2</Y><Z>0</Z></Point>
					   <Point><X>-1</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>10</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>-1</X><Y>9</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>1</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>3</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>5</X><Y>9</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>10</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>5</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>1</X><Y>2</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>4</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>-3</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>-3</Y><Z>0</Z></Point>
					</Points>
					<Closed>true</Closed>
				</Curve>
			</Presentation>

				</Group>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
	</ActiveObjectClasses>	
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>
	<Frame>
		<Width>1000</Width>
		<Height>960</Height>
	</Frame>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ShutdownCompact>false</ShutdownCompact>
		<ImportSettings>
			<ExternalConnection>
				<Id>1598872074474</Id>
				<Name><![CDATA[database]]></Name>
				<X>0</X><Y>0</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>true</PresentationFlag>
				<ShowLabel>true</ShowLabel>
				<DatabaseType>EXCEL_ACCESS</DatabaseType>
				<ConnectionURL><![CDATA[]]></ConnectionURL>
				<ConnectOnStartup>true</ConnectOnStartup>
				<DatabaseName><![CDATA[]]></DatabaseName>
				<ResourceReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[Initialization_Tables.xlsx]]></ClassName>
				</ResourceReference>
				<Host><![CDATA[localhost]]></Host>
				<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
				<Login><![CDATA[]]></Login>
				<Password><![CDATA[]]></Password>
			</ExternalConnection>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[death_rate_survival_ratio]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["Death_Rate_Survival_Ratio"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[net_in_migration_per_year]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["Net_In_Migration_Per_Year"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[death_rate_cdr]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["Death_Rate_cdr"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[net_out_migration_per_year]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["Net_Out_Migration_Per_Year"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
		</ImportSettings>
		<ExportSettings>
		</ExportSettings>
	</Database>
	
	<RunConfiguration ActiveObjectClassId="1494655951608">
		<Id>1494655951639</Id>
		<Name><![CDATA[RunConfiguration]]></Name>
		<MaximumMemory>512</MaximumMemory>
		<ModelTimeProperties>
			<StopOption><![CDATA[Stop at specified time]]></StopOption>
			<InitialDate><![CDATA[1494633600000]]></InitialDate>	
			<InitialTime><![CDATA[0.0]]></InitialTime>	
			<FinalDate><![CDATA[1497312000000]]></FinalDate>	
			<FinalTime><![CDATA[100.0]]></FinalTime>	
		</ModelTimeProperties>
		<AnimationProperties>
			<StopNever>true</StopNever>
			<ExecutionMode>realTimeScaled</ExecutionMode>
			<RealTimeScale>10.0</RealTimeScale>
			<EnableZoomAndPanning>true</EnableZoomAndPanning>
			<EnableDeveloperPanel>false</EnableDeveloperPanel>
			<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
		</AnimationProperties>
		<Inputs>		
		</Inputs>
		<Outputs>
		</Outputs>
	</RunConfiguration>
	<Experiments>	
		<!--   =========  Parameter Variation Experiment   ========  -->
		<ParamVariationExperiment ActiveObjectClassId="1494655951608">
			<Id>1648492659756</Id>
			<Name><![CDATA[ParametersVariation]]></Name>
			<AdditionalClassCode><![CDATA[public static BufferedWriter realRatesWriter;
private static Object writerLock = new Object();

static {
synchronized(writerLock) {
if (realRatesWriter == null) {


try {
	StringBuilder sb = new StringBuilder();
	
	sb.append("CountryId"); sb.append(',');
	sb.append("time"); sb.append(',');
	sb.append("gender"); sb.append(',');
	sb.append("using_age"); sb.append(',');
	sb.append("cur_age"); sb.append(',');
	sb.append("rate_type"); sb.append(',');
	sb.append("val"); sb.append('\n');
	realRatesWriter = new BufferedWriter(new FileWriter("RatesBreakdown.csv"));
	realRatesWriter.write(sb.toString());
} catch (IOException e) {
	throw new RuntimeException("Error 1");
}
}
}
}]]></AdditionalClassCode>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Import><![CDATA[import java.util.function.Predicate;
import java.io.*;]]></Import>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<InitialSetupCode><![CDATA[//setRealRatesWriter();]]></InitialSetupCode>
			<MaximumMemory>100000</MaximumMemory>
			<RandomNumberGenerationType>randomSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<BeforeSimulationRunCode><![CDATA[traceln("Starting a sim");

//REMINDER: Set the AnnualCSV_FileName parameter to this same name
String AnnualStats_CsvFileName = "CRED_Annual_Soc_Stats.csv";
//String AnnualClub_CsvFileName = "CRED_Annual_Club_Stats.csv";
//root.Annual_Individual_CSV_FileName = "Deaths_per_Year_First_Period.csv";

root.SimulationID = getCurrentIteration() + "_" + getCurrentReplication();
traceln("Current_Sim: " + root.SimulationID);

root.Create_AnnualCSV_CustomExp(root.AnnualCSV_FileName );
//root.Create_Annual_Individual_CSV_CustomExp(root.Annual_Individual_CSV_FileName);
//root.Create_Annual_Club_CSV_CustomExp(root.Annual_Club_CSV_FileName);]]></BeforeSimulationRunCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>


			<AfterExperimentCode><![CDATA[try {
	realRatesWriter.flush();
}catch (IOException e) {
	traceln("Error");
}]]></AfterExperimentCode>
			<AllowParallelEvaluations>true</AllowParallelEvaluations>
			<UseFreeformParameters>false</UseFreeformParameters>
			<NumberOfRuns>10</NumberOfRuns>
			<FreeformParamValue>	
				<Id>1540893879728</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540893879734</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540893879741</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540894011080</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1541740410511</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1588671396788</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1590673500669</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1612992144530</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1617721935915</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1618332956184</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1618584211210</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1620835060614</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1620919785493</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1621627279688</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1621629563421</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1631551760655</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1635971049972</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1639591937776</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648492121753</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648492141861</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648493023183</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648595220287</Id>
			</FreeformParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879728</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA["CRED_Annual_Stats.csv"]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879734</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA["unused_output.csv"]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879741</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540894011080</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[true]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1541740410511</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA["unused_output2.csv"]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1588671396788</Id>
				<Type>RANGE</Type>
				<From Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[100]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1590673500669</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1612992144530</Id>
				<Type>RANGE</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1617721935915</Id>
				<Type>RANGE</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1618332956184</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1618584211210</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1620835060614</Id>
				<Type>RANGE</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1620919785493</Id>
				<Type>RANGE</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1621627279688</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1621629563421</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[100000]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1631551760655</Id>
				<Type>RANGE</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1635971049972</Id>
				<Type>RANGE</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[DBUtils.COUNTRY_ID_USA]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[3]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1639591937776</Id>
				<Type>RANGE</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648492121753</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[-1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[4]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648492141861</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[{400, 1000, 10000, 50000, 100000}]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648493023183</Id>
				<Type>RANGE</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648595220287</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[Main.BASIC_FILTER]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified date]]></StopOption>
				<InitialDate><![CDATA[-631152000000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[4102444800000]]></FinalDate>	
				<FinalTime><![CDATA[150.1013698630137]]></FinalTime>	
			</ModelTimeProperties>
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<Title><![CDATA[Cohort_Component_Method : ParametersVariation]]></Title>
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
			</PresentationProperties>
			<ReplicationsProperties>
				<UseReplication>false</UseReplication>
				<FixedReplicationsNumber>true</FixedReplicationsNumber>
				<ReplicationPerIteration>10</ReplicationPerIteration>
				<MinimumReplication>2</MinimumReplication>
				<MaximumReplication>10</MaximumReplication>
				<ConfidenceLevel>LEVEL_80</ConfidenceLevel>
				<ErrorPercent>0.5</ErrorPercent>
				<ExpressionForConfidenceComputation><![CDATA[0]]></ExpressionForConfidenceComputation>
			</ReplicationsProperties>
		</ParamVariationExperiment>	
	</Experiments>
	<JavaClasses>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1631549080874</Id>
			<Name><![CDATA[DBUtils]]></Name>
			<Text><![CDATA[import java.util.stream.Collectors;

/**
 * This class has helper functions to pull from the database to get
 * rate information.
 */	
public final class DBUtils {

	public static final int COUNTRY_ID_NORWAY = 1;
	public static final int COUNTRY_ID_USA = 2;
	public static final int COUNTRY_ID_INDIA = 3;

	public static final List<Double> getInitialAgeWeightsMale(Main main) {
		final List<Double> rawWeights = main.selectFrom(init_age_dist_1950_un_mal)
									.where(init_age_dist_1950_un_mal.country_id.eq(main.country_id))
									.orderBy(init_age_dist_1950_un_mal.start.asc())
									.list(init_age_dist_1950_un_mal.weight);
		final double sumWeight = main.selectFrom(init_age_dist_1950_un_mal)
								.where(init_age_dist_1950_un_mal.country_id.eq(main.country_id))
								.list(init_age_dist_1950_un_mal.weight.sum())
								.get(0);
		
		return rawWeights.stream().map(d -> d / sumWeight).collect(Collectors.toList());
	}
	
	public static final List<Double> getInitialAgeWeightsFemale(Main main) {
		final List<Double> rawWeights = main.selectFrom(init_age_dist_1950_un_fem)
									.where(init_age_dist_1950_un_fem.country_id.eq(main.country_id))
									.orderBy(init_age_dist_1950_un_fem.start.asc())
									.list(init_age_dist_1950_un_fem.weight);
		final double sumWeight = main.selectFrom(init_age_dist_1950_un_fem)
								.where(init_age_dist_1950_un_fem.country_id.eq(main.country_id))
								.list(init_age_dist_1950_un_fem.weight.sum())
								.get(0);
		
		return rawWeights.stream().map(d -> d / sumWeight).collect(Collectors.toList());
	}
	
	public static final double getYearlyFertilityRate(Main main, String period, int age) {
		return main.selectFrom(fertility_rate)
				.where(fertility_rate.country_id.eq(main.country_id))
				.where(fertility_rate.period.eq(period))
				.where(fertility_rate.cohort.eq(age))
				.uniqueResult(true, fertility_rate.value);
	}
	
	public static final double getInfantSexRatio(Main main, String period) {
		return main.selectFrom(sex_ratio_at_birth)
				.where(sex_ratio_at_birth.country_id.eq(main.country_id))
				.where(sex_ratio_at_birth.period.eq(period))
				.uniqueResult(true, sex_ratio_at_birth.value);
	}
	
	/**
	 * When using split age in one year step models, infants have some special handling
	 * of mortality rate.
	 * @param main
	 * @param period
	 * @param age
	 * @param gender
	 * @return
	 */
	public static final double getInfantDeathRate(Main main, String period, double age, Gender_List gender) {
		if (!(main.ForceUseSplitAge && !main.FiveYearStep)) {
			throw new IllegalStateException("Function not applicable to not splitFert or 5 year.");
		}
			
		if (age >= 4) {
			throw new IllegalStateException("Cannot call getInfantDeathRate on non-infant.");
		}
		String cohort = getDeathCohortSurvivalRatio(main, period, -1, gender);
		//traceln(String.format("%s %f %s %s", period, age, cohort, gender.toString()));
		double survivalRatio = main.selectFrom(un_survival_ratio)
				.where(un_survival_ratio.country_id.eq(main.country_id))
				.where(un_survival_ratio.period.eq(period))
				.where(un_survival_ratio.cohort.eq(cohort))
				.where(un_survival_ratio.gender.eq(gender))
				.uniqueResult(true, un_survival_ratio.survival_ratio);
		
		int year = (int) floor(main.time(YEAR));
		int yearsPassedInPeriod = year % 5;
		double yearsAgoBorn = age + 1;
		double tc = yearsPassedInPeriod - yearsAgoBorn;
		double powerDenominator = 5 - tc;
		return 1.0 - Math.pow(survivalRatio, 1.0 / powerDenominator);
	}
		

	public static final double getDeathRateFromSurvivalRatio(Main main, String period, double age, Gender_List gender) {
		if (main.ForceUseSplitAge && !main.FiveYearStep && age < 0) {
			throw new IllegalStateException("Must call getInfantDeathRate for infants during 1yr splitFert.");
		}
		
		String cohort = getDeathCohortSurvivalRatio(main, period, age, gender);
		double survivalRatio = main.selectFrom(un_survival_ratio)
				.where(un_survival_ratio.country_id.eq(main.country_id))
				.where(un_survival_ratio.period.eq(period))
				.where(un_survival_ratio.cohort.eq(cohort))
				.where(un_survival_ratio.gender.eq(gender))
				.uniqueResult(true, un_survival_ratio.survival_ratio);
		if (main.FiveYearStep) {
			return 1.0 - survivalRatio;
		} else {
			return 1.0 - Math.pow(survivalRatio, 0.2);
		}
	}
	
	public static final String getDeathCohortSurvivalRatio(Main main, String period, double age, Gender_List gender) {
		if (age < 0) { return "0-1";}
		else if (age < 5) { return "1-4";}
		else if (age < 10) {return "5-9";}
		else if (age < 15) {return "10-14";}
		else if (age < 20) {return "15-19";}
		else if (age < 25) {return "20-24";}
		else if (age < 30) {return "25-29";}
		else if (age < 35) {return "30-34";}
		else if (age < 40) {return "35-39";}
		else if (age < 45) {return "40-44";}
		else if (age < 50) {return "45-49";}
		else if (age < 55) {return "50-54";}
		else if (age < 60) {return "55-59";}
		else if (age < 65) {return "60-64";}
		else if (age < 70) {return "65-69";}
		else if (age < 75) {return "70-74";}
		else if (age < 80) {return "75-79";}
		else if (age < 85) {return "80-84";}
		else if (age < 90) {return "85-89";}
		else if (age < 95) {return "90-94";}
		else if (age <= 104) {return "95-99";} // 100 yr olds experience 95-99
		else if (age >= 105) {return "100+";}
		else {traceln("Error: age cohort not found"); return "-1";}
	}
	
	public static final Map<Cohort, Integer> getNumEmigrants(Main main, String period) {
		Map<Cohort, Integer> toReturn = new HashMap<>();
		
		int Net_Out_migration_Mal = (int) Math.rint(
				100.0 * main.Percent_Pop * main.selectFrom(net_out_migration_per_period)
				.where(net_out_migration_per_period.country_id.eq(main.country_id))
				.where(net_out_migration_per_period.period.eq(period))
				.where(net_out_migration_per_period.gender.eq(MALE))
				.uniqueResult(net_out_migration_per_period.counts));
		if (Net_Out_migration_Mal > 0) {
			List<Tuple> ageProp = main.selectFrom(net_out_mig_age_gender_prop)
					.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
					.where(net_out_mig_age_gender_prop.period.eq(period))
	                .where(net_out_mig_age_gender_prop.gender.eq(MALE))
	                .list(net_out_mig_age_gender_prop.cohort, net_out_mig_age_gender_prop.value);
			for (Tuple t : ageProp) {
				if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
					int year = (int) floor(main.time(YEAR));
					int yearsPassedInPeriod = year % 5;
					for (int curAge = -1; curAge < yearsPassedInPeriod; curAge++) {
						double yearsAgoBorn = curAge + 1;
						double tc = yearsPassedInPeriod - yearsAgoBorn;
						double denominator = (5 - tc) * 5;
						
						int numEmigrants = (int) Math.rint(
								t.get(1, Double.class) 
								* Net_Out_migration_Mal 
								/ denominator);
						if (numEmigrants > 0) {
							String cohort = t.get(0, String.class);
							double age = getEmigrantAgeFromCohortString(cohort);
							toReturn.put(Cohort.getMigrationCohort(age, MALE, curAge), numEmigrants);
						}
					}
					
				} else {
				
					int numEmigrants = (int) Math.rint(
							t.get(1, Double.class) 
							* Net_Out_migration_Mal 
							/ (main.FiveYearStep 
									? 1 
									: 25.0));
					if (numEmigrants > 0) {
						String cohort = t.get(0, String.class);
						double age = getEmigrantAgeFromCohortString(cohort);
						toReturn.put(Cohort.getMigrationCohort(age, MALE), numEmigrants);
					}
				}
			}
		}
		
		
		int Net_Out_migration_Fem = (int) Math.rint(
				100.0 * main.Percent_Pop * main.selectFrom(net_out_migration_per_period)
				.where(net_out_migration_per_period.country_id.eq(main.country_id))
				.where(net_out_migration_per_period.period.eq(period))
				.where(net_out_migration_per_period.gender.eq(FEMALE))
				.uniqueResult(net_out_migration_per_period.counts));
		if (Net_Out_migration_Fem > 0) {
			List<Tuple> ageProp = main.selectFrom(net_out_mig_age_gender_prop)
					.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
					.where(net_out_mig_age_gender_prop.period.eq(period))
	                .where(net_out_mig_age_gender_prop.gender.eq(FEMALE))
	                .list(net_out_mig_age_gender_prop.cohort, net_out_mig_age_gender_prop.value);
			for (Tuple t : ageProp) {
				if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
					int year = (int) floor(main.time(YEAR));
					int yearsPassedInPeriod = year % 5;
					for (int curAge = -1; curAge < yearsPassedInPeriod; curAge++) {
						double yearsAgoBorn = curAge + 1;
						double tc = yearsPassedInPeriod - yearsAgoBorn;
						double denominator = (5 - tc) * 5;
						
						int numEmigrants = (int) Math.rint(
								t.get(1, Double.class) 
								* Net_Out_migration_Fem 
								/ denominator);
						if (numEmigrants > 0) {
							String cohort = t.get(0, String.class);
							double age = getEmigrantAgeFromCohortString(cohort);
							toReturn.put(Cohort.getMigrationCohort(age, FEMALE, curAge), numEmigrants);
						}
					}
				} else {
					int numEmigrants = (int) Math.rint(
							t.get(1, Double.class) 
							* Net_Out_migration_Fem 
							/ (main.FiveYearStep 
									? 1 
									: 25.0));
					if (numEmigrants > 0) {
						String cohort = t.get(0, String.class);
						double age = getEmigrantAgeFromCohortString(cohort);
						toReturn.put(Cohort.getMigrationCohort(age, FEMALE), numEmigrants);
					}
				}
			}
		}

		return toReturn;
	}
	
	public static final double getNumEmigrants(Main main, String period, double age, Gender_List gender) {
		String cohort = 
				age >= 80 
					? "80+" 
					: age <= 3
							? "0-4"
							: String.format("%d-%d", (int) age, ((int)age) + 4);
		
		boolean hasResults = main.selectFrom(net_out_mig_age_gender_prop)
				.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
				.where(net_out_mig_age_gender_prop.period.eq(period))
                .where(net_out_mig_age_gender_prop.gender.eq(gender))
                .where(net_out_mig_age_gender_prop.cohort.eq(cohort))
                .hasResults();
		if (!hasResults) {
			return 0.0;
		}
		
		if (gender == MALE) {
			int Net_Out_migration_Mal = (int) Math.rint(
					100.0 * main.Percent_Pop *main.selectFrom(net_out_migration_per_period)
					.where(net_out_migration_per_period.country_id.eq(main.country_id))
					.where(net_out_migration_per_period.period.eq(period))
					.where(net_out_migration_per_period.gender.eq(MALE))
					.uniqueResult(true, net_out_migration_per_period.counts));
			if (Net_Out_migration_Mal <= 0) {
				return 0.0;
			}

			
			double prop = main.selectFrom(net_out_mig_age_gender_prop)
						.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
						.where(net_out_mig_age_gender_prop.period.eq(period))
		                .where(net_out_mig_age_gender_prop.gender.eq(MALE))
		                .where(net_out_mig_age_gender_prop.cohort.eq(cohort))
		                .uniqueResult(true, net_out_mig_age_gender_prop.value);
			// In split age one year step models, infants have some special migration handling.
			if (!main.FiveYearStep && main.ForceUseSplitAge && age <= 3) {
				int year = (int) floor(main.time(YEAR));
				int yearsPassedInPeriod = year % 5;
				double yearsAgoBorn = age + 1;
				double tc = yearsPassedInPeriod - yearsAgoBorn;
				double denominator = (5 - tc) * 5;
				
				int numEmigrants = (int) Math.rint(
						prop
						* Net_Out_migration_Mal 
						/ denominator);
				return numEmigrants;
			} else {
			
				int numEmigrants = (int) Math.rint(
						prop
						* Net_Out_migration_Mal 
						/ (main.FiveYearStep 
								? 1 
								: 25.0));
				return numEmigrants;
			}
		}
	
		if (gender == FEMALE) {
			int Net_Out_migration_Fem = (int) Math.rint(
					100.0 * main.Percent_Pop *main.selectFrom(net_out_migration_per_period)
					.where(net_out_migration_per_period.country_id.eq(main.country_id))
					.where(net_out_migration_per_period.period.eq(period))
					.where(net_out_migration_per_period.gender.eq(FEMALE))
					.uniqueResult(true, net_out_migration_per_period.counts));
			if (Net_Out_migration_Fem <= 0) {
				return 0.0;
			}

			
			double prop = main.selectFrom(net_out_mig_age_gender_prop)
						.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
						.where(net_out_mig_age_gender_prop.period.eq(period))
		                .where(net_out_mig_age_gender_prop.gender.eq(FEMALE))
		                .where(net_out_mig_age_gender_prop.cohort.eq(cohort))
		                .uniqueResult(true, net_out_mig_age_gender_prop.value);
			// In split age one year step models, infants have some special migration handling.
			if (!main.FiveYearStep && main.ForceUseSplitAge && age <= 3) {
				int year = (int) floor(main.time(YEAR));
				int yearsPassedInPeriod = year % 5;
				double yearsAgoBorn = age + 1;
				double tc = yearsPassedInPeriod - yearsAgoBorn;
				double denominator = (5 - tc) * 5;
				
				int numEmigrants = (int) Math.rint(
						prop
						* Net_Out_migration_Fem 
						/ denominator);
				return numEmigrants;
			} else {
			
				int numEmigrants = (int) Math.rint(
						prop
						* Net_Out_migration_Fem 
						/ (main.FiveYearStep 
								? 1 
								: 25.0));
				return numEmigrants;
			}
		}
		
		return 0.0;
	}
	
	public static final double getEmigrationRate(final Main main, final String period, final Person p) {
		Cohort cohort = Cohort.asMigrationCohort(p);
		main.emigrationRateCache.computeIfAbsent(cohort, k -> {
			double population = main.People.findAll(cohort::includesPerson).size();				
			double numEmigrants = getNumEmigrants(main, period, k.age, k.gender);
			return numEmigrants / population;
		});
		
		return main.emigrationRateCache.get(cohort);
	}
	
	public static final int getNumFemaleImmigrants(Main main, String period) {
		return (int) Math.rint(100.0 * main.Percent_Pop * main.selectFrom(net_in_migration_per_period)
				.where(net_in_migration_per_period.country_id.eq(main.country_id))
				.where(net_in_migration_per_period.period.eq(period))
				.where(net_in_migration_per_period.gender.eq(FEMALE))
				.uniqueResult(true, net_in_migration_per_period.counts)
				/ (main.FiveYearStep ? 1 : 5.0));
	}
	
	public static final int getNumMaleImmigrants(Main main, String period) {
		return (int) Math.rint(100.0 * main.Percent_Pop * main.selectFrom(net_in_migration_per_period)
				.where(net_in_migration_per_period.country_id.eq(main.country_id))
				.where(net_in_migration_per_period.period.eq(period))
				.where(net_in_migration_per_period.gender.eq(MALE))
				.uniqueResult(true, net_in_migration_per_period.counts)
				/ (main.FiveYearStep ? 1 : 5.0));
	}
	
	public static final Map<Cohort, Double> getImmigrantsWeights(Main main, String period, Gender_List gender) {
		Map<Cohort, Double> toReturn = new HashMap<>();
		
		List<Tuple> ageProp = main.selectFrom(net_in_mig_age_gender_prop)
				.where(net_in_mig_age_gender_prop.country_id.eq(main.country_id))
				.where(net_in_mig_age_gender_prop.period.eq(period))
                .where(net_in_mig_age_gender_prop.gender.eq(gender))
                .where(net_in_mig_age_gender_prop.value.gt(0.0))
                .list(net_in_mig_age_gender_prop.cohort, net_in_mig_age_gender_prop.value);
		for (Tuple t : ageProp) {
			double weight = t.get(1, Double.class);
			String cohort = t.get(0, String.class);
			double age = getEmigrantAgeFromCohortString(cohort);
			toReturn.put(Cohort.getMigrationCohort(age, gender), weight);
		}

		return toReturn;
	}
	
	public static final Map<Cohort, Integer> getNumImmigrants(Main main, String period) {
		Map<Cohort, Integer> toReturn = new HashMap<>();
		
		int Net_In_migration_Mal = getNumMaleImmigrants(main, period);
		if (Net_In_migration_Mal > 0) {
			List<Tuple> ageProp = main.selectFrom(net_in_mig_age_gender_prop)
					.where(net_in_mig_age_gender_prop.country_id.eq(main.country_id))
					.where(net_in_mig_age_gender_prop.period.eq(period))
	                .where(net_in_mig_age_gender_prop.gender.eq(MALE))
	                .list(net_in_mig_age_gender_prop.cohort, net_in_mig_age_gender_prop.value);
			for (Tuple t : ageProp) {
				// In split age one year step models, infants have some special migration handling.
				if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
					int year = (int) floor(main.time(YEAR));
					int yearsPassedInPeriod = year % 5;
					for (int curAge = 0; curAge <= yearsPassedInPeriod; curAge++) {
						double tc = yearsPassedInPeriod - curAge;
						double denominator = (5 - tc) * 5;
						
						int numImmigrants = (int) Math.rint(
								5.0
								* t.get(1, Double.class) 
								* Net_In_migration_Mal 
								/ denominator);
						if (numImmigrants > 0) {
							String cohort = t.get(0, String.class);
							double age = getEmigrantAgeFromCohortString(cohort);
							toReturn.put(Cohort.getMigrationCohort(age, MALE, curAge), numImmigrants);
						}
					}
				} else {
					int numImmigrants = (int) Math.rint(t.get(1, Double.class) * Net_In_migration_Mal);
					if (numImmigrants > 0) {
						String cohort = t.get(0, String.class);
						double age = getEmigrantAgeFromCohortString(cohort);
						toReturn.put(Cohort.getMigrationCohort(age, MALE), numImmigrants);
					}
				}
			}
		}
		
		
		int Net_In_migration_Fem = getNumFemaleImmigrants(main, period);
		if (Net_In_migration_Fem > 0) {
			List<Tuple> ageProp = main.selectFrom(net_in_mig_age_gender_prop)
					.where(net_in_mig_age_gender_prop.country_id.eq(main.country_id))
					.where(net_in_mig_age_gender_prop.period.eq(period))
	                .where(net_in_mig_age_gender_prop.gender.eq(FEMALE))
	                .list(net_in_mig_age_gender_prop.cohort, net_in_mig_age_gender_prop.value);
			for (Tuple t : ageProp) {
				// In split age one year step models, infants have some special migration handling.
				if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
					int year = (int) floor(main.time(YEAR));
					int yearsPassedInPeriod = year % 5;
					for (int curAge = 0; curAge <= yearsPassedInPeriod; curAge++) {
						double tc = yearsPassedInPeriod - curAge;
						double denominator = (5 - tc) * 5;
						
						int numImmigrants = (int) Math.rint(
								5.0
								* t.get(1, Double.class) 
								* Net_In_migration_Fem 
								/ denominator);
						if (numImmigrants > 0) {
							String cohort = t.get(0, String.class);
							double age = getEmigrantAgeFromCohortString(cohort);
							toReturn.put(Cohort.getMigrationCohort(age, FEMALE, curAge), numImmigrants);
						}
					}
				} else {
					int numImmigrants = (int) Math.rint(t.get(1, Double.class) * Net_In_migration_Fem);
					if (numImmigrants > 0) {
						String cohort = t.get(0, String.class);
						double age = getEmigrantAgeFromCohortString(cohort);
						toReturn.put(Cohort.getMigrationCohort(age, FEMALE), numImmigrants);
					}
				}
			}
		}

		return toReturn;
	}
	
	public static final double getEmigrantAgeFromCohortString(String cohort) {
		int dashIndex = cohort.indexOf('-');
		if (dashIndex > 0) {
			return Integer.parseInt(cohort.substring(0, dashIndex));
		}
		int plusIndex = cohort.indexOf('+');
		if (plusIndex > 0) {
			return Integer.parseInt(cohort.substring(0, plusIndex));
		}
		throw new IllegalStateException("Error with cohort age group");
	}
	
	private DBUtils() {}

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1631550869382</Id>
			<Name><![CDATA[Utils]]></Name>
			<Text><![CDATA[

/**
 * Utils
 */	
public class Utils implements Serializable {

    private Utils() {}
    

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1631551080184</Id>
			<Name><![CDATA[Cohort]]></Name>
			<Text><![CDATA[import java.util.function.Predicate;
/**
 * Cohort is a very important class for the model. Cohort
 * is used as a key for grouping agents, meaning it MUST
 * have a correct hash function, equals(), and compare:
 * if two cohorts are equal, hash functions must be identical,
 * equals must return true, and compare must return 0.
 * 
 * For five year step, cohorts represent each age sex cohort by
 * 5 year age group.
 * 
 * For one year steps, each age has a separate cohort group -
 * cohorts are not just 5 year age groups. Very importantly,
 * in split age models, Cohort is where the age that will be
 * used for mortality / migration risk is set.
 */	
public class Cohort implements Comparable<Cohort>{

	// Cohorts can be used for migration, mortality, or fertility.
	// Type is important for cohort equality and selecting age.
	private static enum CohortType {MIGRATION, MORTALITY, FERTILITY};
	
	/**
	 * age is the age that will be used for Cohort risk. age may or
	 * may not equal curAge.
	 * 
	 * For five year step models, curAge is irrelevant and set to -1.
	 */
	public final double age;
	/**
	 * curAge is the actual current age of the agents represented in the
	 * cohort.
	 * 
	 * For example, in a one year split age model, an agent aged 47 will have
	 * a cohort with curAge == 47, but age will be either 40 or 45 depending
	 * on whether the agent was < 45 or not at period start.
	 */
	public final double curAge;
	public final Gender_List gender;
	public final CohortType type;
	
	private static final Cohort asCohort(Person p, CohortType type) {
		switch(type) {
			case MIGRATION:
				return asMigrationCohort(p);
			case MORTALITY:
				return asDeathCohort(p);
			case FERTILITY:
				return asFertilityCohort(p);
		}
		throw new IllegalStateException();
	}
	
	public static final Cohort asDeathCohort(Person p) {
		Main m = p.get_Main();
		if (!m.FiveYearStep) {
			if (m.ForceUseSplitAge) {
				// For mortality, the age of the agent at the start of the period is used for risk
				return getDeathCohort(p.Age_At_Period_Start, p.Gender, p.Age);
			} else {
				return getDeathCohort(p.Age, p.Gender, p.Age);
			}
		}
		return getDeathCohort(p.Age, p.Gender);
	}
	
	public static final Cohort asMigrationCohort(Person p) {
		Main m = p.get_Main();
		if (!m.FiveYearStep) {
			if (m.ForceUseSplitAge) {
				// For migration, the age of the agent at the end of the period is used for risk
				return getMigrationCohort(p.Age_At_Period_End, p.Gender, p.Age);
			} else {
				return getMigrationCohort(p.Age, p.Gender, p.Age);
			}
		}
		return getMigrationCohort(p.Age, p.Gender);
	}
	
	public static final Cohort asFertilityCohort(Person p) {
		return getFertilityCohort(p.Age, p.Gender);
	}
	
	// Various factory methods - curAge is irrelevant to five year step, so we have
	// factory methods that don't take a curAge.
	
	public static final Cohort getMigrationCohort(double age, Gender_List gender) {
		return new Cohort(age, gender, CohortType.MIGRATION);
	}
	
	public static final Cohort getDeathCohort(double age, Gender_List gender) {
		return new Cohort(age, gender, CohortType.MORTALITY);
	}
	
	public static final Cohort getMigrationCohort(double age, Gender_List gender, double curAge) {
		return new Cohort(age, gender, CohortType.MIGRATION, curAge);
	}
	
	public static final Cohort getDeathCohort(double age, Gender_List gender, double curAge) {
		return new Cohort(age, gender, CohortType.MORTALITY, curAge);
	}
	
	public static final Cohort getFertilityCohort(double age, Gender_List gender) {
		return new Cohort(age, gender, CohortType.FERTILITY, age);
	}
    
	protected Cohort(double age, Gender_List gender, CohortType type) {
		this(age, gender, type, -1.0);
    }
	
	protected Cohort(double age, Gender_List gender, CohortType type, double curAge) {
		if (type == CohortType.MIGRATION && age >= 80) {
			// For migration, the rate for 80 is used for all 80+
			this.age = 80;
		} else if (age < 0) {
			this.age = age;
		} else {
			// Age will always be the lower edge of the cohort age range.
			this.age = age - (age % 5);
		}
		this.gender = gender;
		this.type = type;
		this.curAge = curAge;
    }
	
	public double lowerAge() {
		return age - (age % 5);
	}
	
	public boolean isChildBearing() {
		return 15 <= age && age < 50 && gender == FEMALE;
	}
	
	public boolean includesPerson(Person p) {
		Cohort c = asCohort(p, this.type);
		return c.equals(this);
	}
	
	@Override
	public boolean equals(Object o) {
		if (o instanceof Cohort) {
			Cohort c = (Cohort) o;
			return c.age == this.age && c.gender == this.gender && c.curAge == this.curAge && c.type == this.type;
		}
		return false;
	}
	
	@Override
	public int compareTo(Cohort c) {
		double typeCompare = this.type.ordinal() - c.type.ordinal();
		if (typeCompare != 0) {
			return typeCompare > 0 ? 1 : -1;
		}
		
		double ageCompare = this.age - c.age;
		if (ageCompare != 0) {
			return ageCompare > 0 ? 1 : -1;
		}

		double curAgeCompare = this.curAge - c.curAge;
		if (curAgeCompare != 0) {
			return curAgeCompare > 0 ? 1 : -1;
		}
		
		if (c.gender == this.gender) {
			return 0;
		} else if (c.gender == MALE) {
			return 1;
		} else {
			return -1;
		}
	}
	
	@Override
	public int hashCode() {
		return ((Double)(17 * (gender == MALE ? 2 : 1) * (age + 31) * (curAge + 31))).intValue();
	}

	@Override
	public String toString() {
		return age + " " + gender.toString();
	}

}]]></Text>
		</JavaClass>
	</JavaClasses>
	<ModelResources>
		<Resource>
			<Path><![CDATA[Initialization_Tables.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
	</ModelResources>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.modules.markup_descriptors]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
</Model>
</AnyLogicWorkspace>